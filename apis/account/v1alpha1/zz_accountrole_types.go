// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccountRoleInitParameters struct {

	// (String)
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Identifier for the role; must be unique for your account. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type AccountRoleObservation struct {

	// (String)
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Fully qualified name of the resource. For more information, see object name resolution.
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `json:"fullyQualifiedName,omitempty" tf:"fully_qualified_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Identifier for the role; must be unique for your account. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of Object) Outputs the result of SHOW ROLES for the given role. (see below for nested schema)
	// Outputs the result of `SHOW ROLES` for the given role.
	ShowOutput []AccountRoleShowOutputObservation `json:"showOutput,omitempty" tf:"show_output,omitempty"`
}

type AccountRoleParameters struct {

	// (String)
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	// Identifier for the role; must be unique for your account. Due to technical limitations (read more [here](../guides/identifiers_rework_design_decisions#known-limitations-and-identifier-recommendations)), avoid using the following characters: `|`, `.`, `"`.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type AccountRoleShowOutputInitParameters struct {
}

type AccountRoleShowOutputObservation struct {

	// (Number)
	AssignedToUsers *float64 `json:"assignedToUsers,omitempty" tf:"assigned_to_users,omitempty"`

	// (String)
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String)
	CreatedOn *string `json:"createdOn,omitempty" tf:"created_on,omitempty"`

	// (Number)
	GrantedRoles *float64 `json:"grantedRoles,omitempty" tf:"granted_roles,omitempty"`

	// (Number)
	GrantedToRoles *float64 `json:"grantedToRoles,omitempty" tf:"granted_to_roles,omitempty"`

	// (Boolean)
	IsCurrent *bool `json:"isCurrent,omitempty" tf:"is_current,omitempty"`

	// (Boolean)
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// (Boolean)
	IsInherited *bool `json:"isInherited,omitempty" tf:"is_inherited,omitempty"`

	// (String) Identifier for the role; must be unique for your account. Due to technical limitations (read more here), avoid using the following characters: |, ., ".
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String)
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`
}

type AccountRoleShowOutputParameters struct {
}

// AccountRoleSpec defines the desired state of AccountRole
type AccountRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AccountRoleParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AccountRoleInitParameters `json:"initProvider,omitempty"`
}

// AccountRoleStatus defines the observed state of AccountRole.
type AccountRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AccountRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// AccountRole is the Schema for the AccountRoles API. The resource is used for role management, where roles can be assigned privileges and, in turn, granted to users and other roles. When granted to roles they can create hierarchies of privilege structures. For more details, refer to the official documentation https://docs.snowflake.com/en/user-guide/security-access-control-overview.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type AccountRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	Spec   AccountRoleSpec   `json:"spec"`
	Status AccountRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccountRoleList contains a list of AccountRoles
type AccountRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccountRole `json:"items"`
}

// Repository type metadata.
var (
	AccountRole_Kind             = "AccountRole"
	AccountRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccountRole_Kind}.String()
	AccountRole_KindAPIVersion   = AccountRole_Kind + "." + CRDGroupVersion.String()
	AccountRole_GroupVersionKind = CRDGroupVersion.WithKind(AccountRole_Kind)
)

func init() {
	SchemeBuilder.Register(&AccountRole{}, &AccountRoleList{})
}
