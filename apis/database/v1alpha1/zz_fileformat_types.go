// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FileFormatInitParameters struct {

	// (Boolean) Boolean that specifies to allow duplicate object field names (only the last one will be preserved).
	// Boolean that specifies to allow duplicate object field names (only the last one will be preserved).
	AllowDuplicate *bool `json:"allowDuplicate,omitempty" tf:"allow_duplicate,omitempty"`

	// 8 text.
	// Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.
	BinaryAsText *bool `json:"binaryAsText,omitempty" tf:"binary_as_text,omitempty"`

	// (String) Defines the encoding format for binary input or output.
	// Defines the encoding format for binary input or output.
	BinaryFormat *string `json:"binaryFormat,omitempty" tf:"binary_format,omitempty"`

	// (String) Specifies a comment for the file format.
	// Specifies a comment for the file format.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Specifies the current compression algorithm for the data file.
	// Specifies the current compression algorithm for the data file.
	Compression *string `json:"compression,omitempty" tf:"compression,omitempty"`

	// (String) The database in which to create the file format.
	// The database in which to create the file format.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Defines the format of date values in the data files (data loading) or table (data unloading).
	// Defines the format of date values in the data files (data loading) or table (data unloading).
	DateFormat *string `json:"dateFormat,omitempty" tf:"date_format,omitempty"`

	// (Boolean) Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.
	// Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.
	DisableAutoConvert *bool `json:"disableAutoConvert,omitempty" tf:"disable_auto_convert,omitempty"`

	// structured data tags.
	// Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.
	DisableSnowflakeData *bool `json:"disableSnowflakeData,omitempty" tf:"disable_snowflake_data,omitempty"`

	// (Boolean) Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.
	// Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.
	EmptyFieldAsNull *bool `json:"emptyFieldAsNull,omitempty" tf:"empty_field_as_null,omitempty"`

	// (Boolean) Boolean that enables parsing of octal numbers.
	// Boolean that enables parsing of octal numbers.
	EnableOctal *bool `json:"enableOctal,omitempty" tf:"enable_octal,omitempty"`

	// (String) String (constant) that specifies the character set of the source data when loading data into a table.
	// String (constant) that specifies the character set of the source data when loading data into a table.
	Encoding *string `json:"encoding,omitempty" tf:"encoding,omitempty"`

	// (Boolean) Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.
	// Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.
	ErrorOnColumnCountMismatch *bool `json:"errorOnColumnCountMismatch,omitempty" tf:"error_on_column_count_mismatch,omitempty"`

	// (String) Single character string used as the escape character for field values.
	// Single character string used as the escape character for field values.
	Escape *string `json:"escape,omitempty" tf:"escape,omitempty"`

	// (String) Single character string used as the escape character for unenclosed field values only.
	// Single character string used as the escape character for unenclosed field values only.
	EscapeUnenclosedField *string `json:"escapeUnenclosedField,omitempty" tf:"escape_unenclosed_field,omitempty"`

	// (String) Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).
	// Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).
	FieldDelimiter *string `json:"fieldDelimiter,omitempty" tf:"field_delimiter,omitempty"`

	// (String) Character used to enclose strings.
	// Character used to enclose strings.
	FieldOptionallyEnclosedBy *string `json:"fieldOptionallyEnclosedBy,omitempty" tf:"field_optionally_enclosed_by,omitempty"`

	// (String) Specifies the extension for files unloaded to a stage.
	// Specifies the extension for files unloaded to a stage.
	FileExtension *string `json:"fileExtension,omitempty" tf:"file_extension,omitempty"`

	// (String) Specifies the format of the input files (for data loading) or output files (for data unloading).
	// Specifies the format of the input files (for data loading) or output files (for data unloading).
	FormatType *string `json:"formatType,omitempty" tf:"format_type,omitempty"`

	// 8 encoding errors produce error conditions.
	// Boolean that specifies whether UTF-8 encoding errors produce error conditions.
	IgnoreUTF8Errors *bool `json:"ignoreUtf8Errors,omitempty" tf:"ignore_utf8_errors,omitempty"`

	// (String) Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.
	// Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) String used to convert to and from SQL NULL.
	// String used to convert to and from SQL NULL.
	NullIf []*string `json:"nullIf,omitempty" tf:"null_if,omitempty"`

	// (Boolean) Boolean that specifies whether to use the first row headers in the data files to determine column names.
	// Boolean that specifies whether to use the first row headers in the data files to determine column names.
	ParseHeader *bool `json:"parseHeader,omitempty" tf:"parse_header,omitempty"`

	// (Boolean) Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.
	// Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.
	PreserveSpace *bool `json:"preserveSpace,omitempty" tf:"preserve_space,omitempty"`

	// (String) Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).
	// Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).
	RecordDelimiter *string `json:"recordDelimiter,omitempty" tf:"record_delimiter,omitempty"`

	// 8 characters with the Unicode replacement character (�).
	// Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�).
	ReplaceInvalidCharacters *bool `json:"replaceInvalidCharacters,omitempty" tf:"replace_invalid_characters,omitempty"`

	// (String) The schema in which to create the file format.
	// The schema in which to create the file format.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (Boolean) Boolean that specifies to skip any blank lines encountered in the data files.
	// Boolean that specifies to skip any blank lines encountered in the data files.
	SkipBlankLines *bool `json:"skipBlankLines,omitempty" tf:"skip_blank_lines,omitempty"`

	// (Boolean) Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.
	// Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.
	SkipByteOrderMark *bool `json:"skipByteOrderMark,omitempty" tf:"skip_byte_order_mark,omitempty"`

	// (Number) Number of lines at the start of the file to skip.
	// Number of lines at the start of the file to skip.
	SkipHeader *float64 `json:"skipHeader,omitempty" tf:"skip_header,omitempty"`

	// (Boolean) Boolean that instructs the JSON parser to remove object fields or array elements containing null values.
	// Boolean that instructs the JSON parser to remove object fields or array elements containing null values.
	StripNullValues *bool `json:"stripNullValues,omitempty" tf:"strip_null_values,omitempty"`

	// (Boolean) Boolean that instructs the JSON parser to remove outer brackets.
	// Boolean that instructs the JSON parser to remove outer brackets.
	StripOuterArray *bool `json:"stripOuterArray,omitempty" tf:"strip_outer_array,omitempty"`

	// (Boolean) Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.
	// Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.
	StripOuterElement *bool `json:"stripOuterElement,omitempty" tf:"strip_outer_element,omitempty"`

	// (String) Defines the format of time values in the data files (data loading) or table (data unloading).
	// Defines the format of time values in the data files (data loading) or table (data unloading).
	TimeFormat *string `json:"timeFormat,omitempty" tf:"time_format,omitempty"`

	// (String) Defines the format of timestamp values in the data files (data loading) or table (data unloading).
	// Defines the format of timestamp values in the data files (data loading) or table (data unloading).
	TimestampFormat *string `json:"timestampFormat,omitempty" tf:"timestamp_format,omitempty"`

	// (Boolean) Boolean that specifies whether to remove white space from fields.
	// Boolean that specifies whether to remove white space from fields.
	TrimSpace *bool `json:"trimSpace,omitempty" tf:"trim_space,omitempty"`
}

type FileFormatObservation struct {

	// (Boolean) Boolean that specifies to allow duplicate object field names (only the last one will be preserved).
	// Boolean that specifies to allow duplicate object field names (only the last one will be preserved).
	AllowDuplicate *bool `json:"allowDuplicate,omitempty" tf:"allow_duplicate,omitempty"`

	// 8 text.
	// Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.
	BinaryAsText *bool `json:"binaryAsText,omitempty" tf:"binary_as_text,omitempty"`

	// (String) Defines the encoding format for binary input or output.
	// Defines the encoding format for binary input or output.
	BinaryFormat *string `json:"binaryFormat,omitempty" tf:"binary_format,omitempty"`

	// (String) Specifies a comment for the file format.
	// Specifies a comment for the file format.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Specifies the current compression algorithm for the data file.
	// Specifies the current compression algorithm for the data file.
	Compression *string `json:"compression,omitempty" tf:"compression,omitempty"`

	// (String) The database in which to create the file format.
	// The database in which to create the file format.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Defines the format of date values in the data files (data loading) or table (data unloading).
	// Defines the format of date values in the data files (data loading) or table (data unloading).
	DateFormat *string `json:"dateFormat,omitempty" tf:"date_format,omitempty"`

	// (Boolean) Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.
	// Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.
	DisableAutoConvert *bool `json:"disableAutoConvert,omitempty" tf:"disable_auto_convert,omitempty"`

	// structured data tags.
	// Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.
	DisableSnowflakeData *bool `json:"disableSnowflakeData,omitempty" tf:"disable_snowflake_data,omitempty"`

	// (Boolean) Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.
	// Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.
	EmptyFieldAsNull *bool `json:"emptyFieldAsNull,omitempty" tf:"empty_field_as_null,omitempty"`

	// (Boolean) Boolean that enables parsing of octal numbers.
	// Boolean that enables parsing of octal numbers.
	EnableOctal *bool `json:"enableOctal,omitempty" tf:"enable_octal,omitempty"`

	// (String) String (constant) that specifies the character set of the source data when loading data into a table.
	// String (constant) that specifies the character set of the source data when loading data into a table.
	Encoding *string `json:"encoding,omitempty" tf:"encoding,omitempty"`

	// (Boolean) Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.
	// Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.
	ErrorOnColumnCountMismatch *bool `json:"errorOnColumnCountMismatch,omitempty" tf:"error_on_column_count_mismatch,omitempty"`

	// (String) Single character string used as the escape character for field values.
	// Single character string used as the escape character for field values.
	Escape *string `json:"escape,omitempty" tf:"escape,omitempty"`

	// (String) Single character string used as the escape character for unenclosed field values only.
	// Single character string used as the escape character for unenclosed field values only.
	EscapeUnenclosedField *string `json:"escapeUnenclosedField,omitempty" tf:"escape_unenclosed_field,omitempty"`

	// (String) Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).
	// Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).
	FieldDelimiter *string `json:"fieldDelimiter,omitempty" tf:"field_delimiter,omitempty"`

	// (String) Character used to enclose strings.
	// Character used to enclose strings.
	FieldOptionallyEnclosedBy *string `json:"fieldOptionallyEnclosedBy,omitempty" tf:"field_optionally_enclosed_by,omitempty"`

	// (String) Specifies the extension for files unloaded to a stage.
	// Specifies the extension for files unloaded to a stage.
	FileExtension *string `json:"fileExtension,omitempty" tf:"file_extension,omitempty"`

	// (String) Specifies the format of the input files (for data loading) or output files (for data unloading).
	// Specifies the format of the input files (for data loading) or output files (for data unloading).
	FormatType *string `json:"formatType,omitempty" tf:"format_type,omitempty"`

	// (String) Fully qualified name of the resource. For more information, see object name resolution.
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `json:"fullyQualifiedName,omitempty" tf:"fully_qualified_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// 8 encoding errors produce error conditions.
	// Boolean that specifies whether UTF-8 encoding errors produce error conditions.
	IgnoreUTF8Errors *bool `json:"ignoreUtf8Errors,omitempty" tf:"ignore_utf8_errors,omitempty"`

	// (String) Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.
	// Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) String used to convert to and from SQL NULL.
	// String used to convert to and from SQL NULL.
	NullIf []*string `json:"nullIf,omitempty" tf:"null_if,omitempty"`

	// (Boolean) Boolean that specifies whether to use the first row headers in the data files to determine column names.
	// Boolean that specifies whether to use the first row headers in the data files to determine column names.
	ParseHeader *bool `json:"parseHeader,omitempty" tf:"parse_header,omitempty"`

	// (Boolean) Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.
	// Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.
	PreserveSpace *bool `json:"preserveSpace,omitempty" tf:"preserve_space,omitempty"`

	// (String) Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).
	// Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).
	RecordDelimiter *string `json:"recordDelimiter,omitempty" tf:"record_delimiter,omitempty"`

	// 8 characters with the Unicode replacement character (�).
	// Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�).
	ReplaceInvalidCharacters *bool `json:"replaceInvalidCharacters,omitempty" tf:"replace_invalid_characters,omitempty"`

	// (String) The schema in which to create the file format.
	// The schema in which to create the file format.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (Boolean) Boolean that specifies to skip any blank lines encountered in the data files.
	// Boolean that specifies to skip any blank lines encountered in the data files.
	SkipBlankLines *bool `json:"skipBlankLines,omitempty" tf:"skip_blank_lines,omitempty"`

	// (Boolean) Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.
	// Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.
	SkipByteOrderMark *bool `json:"skipByteOrderMark,omitempty" tf:"skip_byte_order_mark,omitempty"`

	// (Number) Number of lines at the start of the file to skip.
	// Number of lines at the start of the file to skip.
	SkipHeader *float64 `json:"skipHeader,omitempty" tf:"skip_header,omitempty"`

	// (Boolean) Boolean that instructs the JSON parser to remove object fields or array elements containing null values.
	// Boolean that instructs the JSON parser to remove object fields or array elements containing null values.
	StripNullValues *bool `json:"stripNullValues,omitempty" tf:"strip_null_values,omitempty"`

	// (Boolean) Boolean that instructs the JSON parser to remove outer brackets.
	// Boolean that instructs the JSON parser to remove outer brackets.
	StripOuterArray *bool `json:"stripOuterArray,omitempty" tf:"strip_outer_array,omitempty"`

	// (Boolean) Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.
	// Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.
	StripOuterElement *bool `json:"stripOuterElement,omitempty" tf:"strip_outer_element,omitempty"`

	// (String) Defines the format of time values in the data files (data loading) or table (data unloading).
	// Defines the format of time values in the data files (data loading) or table (data unloading).
	TimeFormat *string `json:"timeFormat,omitempty" tf:"time_format,omitempty"`

	// (String) Defines the format of timestamp values in the data files (data loading) or table (data unloading).
	// Defines the format of timestamp values in the data files (data loading) or table (data unloading).
	TimestampFormat *string `json:"timestampFormat,omitempty" tf:"timestamp_format,omitempty"`

	// (Boolean) Boolean that specifies whether to remove white space from fields.
	// Boolean that specifies whether to remove white space from fields.
	TrimSpace *bool `json:"trimSpace,omitempty" tf:"trim_space,omitempty"`
}

type FileFormatParameters struct {

	// (Boolean) Boolean that specifies to allow duplicate object field names (only the last one will be preserved).
	// Boolean that specifies to allow duplicate object field names (only the last one will be preserved).
	// +kubebuilder:validation:Optional
	AllowDuplicate *bool `json:"allowDuplicate,omitempty" tf:"allow_duplicate,omitempty"`

	// 8 text.
	// Boolean that specifies whether to interpret columns with no defined logical data type as UTF-8 text.
	// +kubebuilder:validation:Optional
	BinaryAsText *bool `json:"binaryAsText,omitempty" tf:"binary_as_text,omitempty"`

	// (String) Defines the encoding format for binary input or output.
	// Defines the encoding format for binary input or output.
	// +kubebuilder:validation:Optional
	BinaryFormat *string `json:"binaryFormat,omitempty" tf:"binary_format,omitempty"`

	// (String) Specifies a comment for the file format.
	// Specifies a comment for the file format.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Specifies the current compression algorithm for the data file.
	// Specifies the current compression algorithm for the data file.
	// +kubebuilder:validation:Optional
	Compression *string `json:"compression,omitempty" tf:"compression,omitempty"`

	// (String) The database in which to create the file format.
	// The database in which to create the file format.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Defines the format of date values in the data files (data loading) or table (data unloading).
	// Defines the format of date values in the data files (data loading) or table (data unloading).
	// +kubebuilder:validation:Optional
	DateFormat *string `json:"dateFormat,omitempty" tf:"date_format,omitempty"`

	// (Boolean) Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.
	// Boolean that specifies whether the XML parser disables automatic conversion of numeric and Boolean values from text to native representation.
	// +kubebuilder:validation:Optional
	DisableAutoConvert *bool `json:"disableAutoConvert,omitempty" tf:"disable_auto_convert,omitempty"`

	// structured data tags.
	// Boolean that specifies whether the XML parser disables recognition of Snowflake semi-structured data tags.
	// +kubebuilder:validation:Optional
	DisableSnowflakeData *bool `json:"disableSnowflakeData,omitempty" tf:"disable_snowflake_data,omitempty"`

	// (Boolean) Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.
	// Specifies whether to insert SQL NULL for empty fields in an input file, which are represented by two successive delimiters.
	// +kubebuilder:validation:Optional
	EmptyFieldAsNull *bool `json:"emptyFieldAsNull,omitempty" tf:"empty_field_as_null,omitempty"`

	// (Boolean) Boolean that enables parsing of octal numbers.
	// Boolean that enables parsing of octal numbers.
	// +kubebuilder:validation:Optional
	EnableOctal *bool `json:"enableOctal,omitempty" tf:"enable_octal,omitempty"`

	// (String) String (constant) that specifies the character set of the source data when loading data into a table.
	// String (constant) that specifies the character set of the source data when loading data into a table.
	// +kubebuilder:validation:Optional
	Encoding *string `json:"encoding,omitempty" tf:"encoding,omitempty"`

	// (Boolean) Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.
	// Boolean that specifies whether to generate a parsing error if the number of delimited columns (i.e. fields) in an input file does not match the number of columns in the corresponding table.
	// +kubebuilder:validation:Optional
	ErrorOnColumnCountMismatch *bool `json:"errorOnColumnCountMismatch,omitempty" tf:"error_on_column_count_mismatch,omitempty"`

	// (String) Single character string used as the escape character for field values.
	// Single character string used as the escape character for field values.
	// +kubebuilder:validation:Optional
	Escape *string `json:"escape,omitempty" tf:"escape,omitempty"`

	// (String) Single character string used as the escape character for unenclosed field values only.
	// Single character string used as the escape character for unenclosed field values only.
	// +kubebuilder:validation:Optional
	EscapeUnenclosedField *string `json:"escapeUnenclosedField,omitempty" tf:"escape_unenclosed_field,omitempty"`

	// (String) Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).
	// Specifies one or more singlebyte or multibyte characters that separate fields in an input file (data loading) or unloaded file (data unloading).
	// +kubebuilder:validation:Optional
	FieldDelimiter *string `json:"fieldDelimiter,omitempty" tf:"field_delimiter,omitempty"`

	// (String) Character used to enclose strings.
	// Character used to enclose strings.
	// +kubebuilder:validation:Optional
	FieldOptionallyEnclosedBy *string `json:"fieldOptionallyEnclosedBy,omitempty" tf:"field_optionally_enclosed_by,omitempty"`

	// (String) Specifies the extension for files unloaded to a stage.
	// Specifies the extension for files unloaded to a stage.
	// +kubebuilder:validation:Optional
	FileExtension *string `json:"fileExtension,omitempty" tf:"file_extension,omitempty"`

	// (String) Specifies the format of the input files (for data loading) or output files (for data unloading).
	// Specifies the format of the input files (for data loading) or output files (for data unloading).
	// +kubebuilder:validation:Optional
	FormatType *string `json:"formatType,omitempty" tf:"format_type,omitempty"`

	// 8 encoding errors produce error conditions.
	// Boolean that specifies whether UTF-8 encoding errors produce error conditions.
	// +kubebuilder:validation:Optional
	IgnoreUTF8Errors *bool `json:"ignoreUtf8Errors,omitempty" tf:"ignore_utf8_errors,omitempty"`

	// (String) Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.
	// Specifies the identifier for the file format; must be unique for the database and schema in which the file format is created.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (List of String) String used to convert to and from SQL NULL.
	// String used to convert to and from SQL NULL.
	// +kubebuilder:validation:Optional
	NullIf []*string `json:"nullIf,omitempty" tf:"null_if,omitempty"`

	// (Boolean) Boolean that specifies whether to use the first row headers in the data files to determine column names.
	// Boolean that specifies whether to use the first row headers in the data files to determine column names.
	// +kubebuilder:validation:Optional
	ParseHeader *bool `json:"parseHeader,omitempty" tf:"parse_header,omitempty"`

	// (Boolean) Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.
	// Boolean that specifies whether the XML parser preserves leading and trailing spaces in element content.
	// +kubebuilder:validation:Optional
	PreserveSpace *bool `json:"preserveSpace,omitempty" tf:"preserve_space,omitempty"`

	// (String) Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).
	// Specifies one or more singlebyte or multibyte characters that separate records in an input file (data loading) or unloaded file (data unloading).
	// +kubebuilder:validation:Optional
	RecordDelimiter *string `json:"recordDelimiter,omitempty" tf:"record_delimiter,omitempty"`

	// 8 characters with the Unicode replacement character (�).
	// Boolean that specifies whether to replace invalid UTF-8 characters with the Unicode replacement character (�).
	// +kubebuilder:validation:Optional
	ReplaceInvalidCharacters *bool `json:"replaceInvalidCharacters,omitempty" tf:"replace_invalid_characters,omitempty"`

	// (String) The schema in which to create the file format.
	// The schema in which to create the file format.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (Boolean) Boolean that specifies to skip any blank lines encountered in the data files.
	// Boolean that specifies to skip any blank lines encountered in the data files.
	// +kubebuilder:validation:Optional
	SkipBlankLines *bool `json:"skipBlankLines,omitempty" tf:"skip_blank_lines,omitempty"`

	// (Boolean) Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.
	// Boolean that specifies whether to skip the BOM (byte order mark), if present in a data file.
	// +kubebuilder:validation:Optional
	SkipByteOrderMark *bool `json:"skipByteOrderMark,omitempty" tf:"skip_byte_order_mark,omitempty"`

	// (Number) Number of lines at the start of the file to skip.
	// Number of lines at the start of the file to skip.
	// +kubebuilder:validation:Optional
	SkipHeader *float64 `json:"skipHeader,omitempty" tf:"skip_header,omitempty"`

	// (Boolean) Boolean that instructs the JSON parser to remove object fields or array elements containing null values.
	// Boolean that instructs the JSON parser to remove object fields or array elements containing null values.
	// +kubebuilder:validation:Optional
	StripNullValues *bool `json:"stripNullValues,omitempty" tf:"strip_null_values,omitempty"`

	// (Boolean) Boolean that instructs the JSON parser to remove outer brackets.
	// Boolean that instructs the JSON parser to remove outer brackets.
	// +kubebuilder:validation:Optional
	StripOuterArray *bool `json:"stripOuterArray,omitempty" tf:"strip_outer_array,omitempty"`

	// (Boolean) Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.
	// Boolean that specifies whether the XML parser strips out the outer XML element, exposing 2nd level elements as separate documents.
	// +kubebuilder:validation:Optional
	StripOuterElement *bool `json:"stripOuterElement,omitempty" tf:"strip_outer_element,omitempty"`

	// (String) Defines the format of time values in the data files (data loading) or table (data unloading).
	// Defines the format of time values in the data files (data loading) or table (data unloading).
	// +kubebuilder:validation:Optional
	TimeFormat *string `json:"timeFormat,omitempty" tf:"time_format,omitempty"`

	// (String) Defines the format of timestamp values in the data files (data loading) or table (data unloading).
	// Defines the format of timestamp values in the data files (data loading) or table (data unloading).
	// +kubebuilder:validation:Optional
	TimestampFormat *string `json:"timestampFormat,omitempty" tf:"timestamp_format,omitempty"`

	// (Boolean) Boolean that specifies whether to remove white space from fields.
	// Boolean that specifies whether to remove white space from fields.
	// +kubebuilder:validation:Optional
	TrimSpace *bool `json:"trimSpace,omitempty" tf:"trim_space,omitempty"`
}

// FileFormatSpec defines the desired state of FileFormat
type FileFormatSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FileFormatParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider FileFormatInitParameters `json:"initProvider,omitempty"`
}

// FileFormatStatus defines the observed state of FileFormat.
type FileFormatStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FileFormatObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// FileFormat is the Schema for the FileFormats API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type FileFormat struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.database) || (has(self.initProvider) && has(self.initProvider.database))",message="spec.forProvider.database is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.formatType) || (has(self.initProvider) && has(self.initProvider.formatType))",message="spec.forProvider.formatType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schema) || (has(self.initProvider) && has(self.initProvider.schema))",message="spec.forProvider.schema is a required parameter"
	Spec   FileFormatSpec   `json:"spec"`
	Status FileFormatStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FileFormatList contains a list of FileFormats
type FileFormatList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FileFormat `json:"items"`
}

// Repository type metadata.
var (
	FileFormat_Kind             = "FileFormat"
	FileFormat_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FileFormat_Kind}.String()
	FileFormat_KindAPIVersion   = FileFormat_Kind + "." + CRDGroupVersion.String()
	FileFormat_GroupVersionKind = CRDGroupVersion.WithKind(FileFormat_Kind)
)

func init() {
	SchemeBuilder.Register(&FileFormat{}, &FileFormatList{})
}
