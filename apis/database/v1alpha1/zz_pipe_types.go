// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PipeInitParameters struct {

	// (Boolean) (Default: false) Specifies a auto_ingest param for the pipe.
	// (Default: `false`) Specifies a auto_ingest param for the pipe.
	AutoIngest *bool `json:"autoIngest,omitempty" tf:"auto_ingest,omitempty"`

	// (String) Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.
	// Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.
	AwsSnsTopicArn *string `json:"awsSnsTopicArn,omitempty" tf:"aws_sns_topic_arn,omitempty"`

	// (String) Specifies a comment for the pipe.
	// Specifies a comment for the pipe.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Specifies the copy statement for the pipe.
	// Specifies the copy statement for the pipe.
	CopyStatement *string `json:"copyStatement,omitempty" tf:"copy_statement,omitempty"`

	// (String) The database in which to create the pipe.
	// The database in which to create the pipe.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Specifies the name of the notification integration used for error notifications.
	// Specifies the name of the notification integration used for error notifications.
	ErrorIntegration *string `json:"errorIntegration,omitempty" tf:"error_integration,omitempty"`

	// (String) Specifies an integration for the pipe.
	// Specifies an integration for the pipe.
	Integration *string `json:"integration,omitempty" tf:"integration,omitempty"`

	// (String) Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.
	// Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The schema in which to create the pipe.
	// The schema in which to create the pipe.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

type PipeObservation struct {

	// (Boolean) (Default: false) Specifies a auto_ingest param for the pipe.
	// (Default: `false`) Specifies a auto_ingest param for the pipe.
	AutoIngest *bool `json:"autoIngest,omitempty" tf:"auto_ingest,omitempty"`

	// (String) Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.
	// Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.
	AwsSnsTopicArn *string `json:"awsSnsTopicArn,omitempty" tf:"aws_sns_topic_arn,omitempty"`

	// (String) Specifies a comment for the pipe.
	// Specifies a comment for the pipe.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Specifies the copy statement for the pipe.
	// Specifies the copy statement for the pipe.
	CopyStatement *string `json:"copyStatement,omitempty" tf:"copy_statement,omitempty"`

	// (String) The database in which to create the pipe.
	// The database in which to create the pipe.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Specifies the name of the notification integration used for error notifications.
	// Specifies the name of the notification integration used for error notifications.
	ErrorIntegration *string `json:"errorIntegration,omitempty" tf:"error_integration,omitempty"`

	// (String) Fully qualified name of the resource. For more information, see object name resolution.
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `json:"fullyQualifiedName,omitempty" tf:"fully_qualified_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Specifies an integration for the pipe.
	// Specifies an integration for the pipe.
	Integration *string `json:"integration,omitempty" tf:"integration,omitempty"`

	// (String) Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.
	// Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) Amazon Resource Name of the Amazon SQS queue for the stage named in the DEFINITION column.
	// Amazon Resource Name of the Amazon SQS queue for the stage named in the DEFINITION column.
	NotificationChannel *string `json:"notificationChannel,omitempty" tf:"notification_channel,omitempty"`

	// (String) Name of the role that owns the pipe.
	// Name of the role that owns the pipe.
	Owner *string `json:"owner,omitempty" tf:"owner,omitempty"`

	// (String) The schema in which to create the pipe.
	// The schema in which to create the pipe.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

type PipeParameters struct {

	// (Boolean) (Default: false) Specifies a auto_ingest param for the pipe.
	// (Default: `false`) Specifies a auto_ingest param for the pipe.
	// +kubebuilder:validation:Optional
	AutoIngest *bool `json:"autoIngest,omitempty" tf:"auto_ingest,omitempty"`

	// (String) Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.
	// Specifies the Amazon Resource Name (ARN) for the SNS topic for your S3 bucket.
	// +kubebuilder:validation:Optional
	AwsSnsTopicArn *string `json:"awsSnsTopicArn,omitempty" tf:"aws_sns_topic_arn,omitempty"`

	// (String) Specifies a comment for the pipe.
	// Specifies a comment for the pipe.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Specifies the copy statement for the pipe.
	// Specifies the copy statement for the pipe.
	// +kubebuilder:validation:Optional
	CopyStatement *string `json:"copyStatement,omitempty" tf:"copy_statement,omitempty"`

	// (String) The database in which to create the pipe.
	// The database in which to create the pipe.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Specifies the name of the notification integration used for error notifications.
	// Specifies the name of the notification integration used for error notifications.
	// +kubebuilder:validation:Optional
	ErrorIntegration *string `json:"errorIntegration,omitempty" tf:"error_integration,omitempty"`

	// (String) Specifies an integration for the pipe.
	// Specifies an integration for the pipe.
	// +kubebuilder:validation:Optional
	Integration *string `json:"integration,omitempty" tf:"integration,omitempty"`

	// (String) Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.
	// Specifies the identifier for the pipe; must be unique for the database and schema in which the pipe is created.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The schema in which to create the pipe.
	// The schema in which to create the pipe.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`
}

// PipeSpec defines the desired state of Pipe
type PipeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PipeParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PipeInitParameters `json:"initProvider,omitempty"`
}

// PipeStatus defines the observed state of Pipe.
type PipeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PipeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Pipe is the Schema for the Pipes API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type Pipe struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.copyStatement) || (has(self.initProvider) && has(self.initProvider.copyStatement))",message="spec.forProvider.copyStatement is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.database) || (has(self.initProvider) && has(self.initProvider.database))",message="spec.forProvider.database is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schema) || (has(self.initProvider) && has(self.initProvider.schema))",message="spec.forProvider.schema is a required parameter"
	Spec   PipeSpec   `json:"spec"`
	Status PipeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PipeList contains a list of Pipes
type PipeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Pipe `json:"items"`
}

// Repository type metadata.
var (
	Pipe_Kind             = "Pipe"
	Pipe_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Pipe_Kind}.String()
	Pipe_KindAPIVersion   = Pipe_Kind + "." + CRDGroupVersion.String()
	Pipe_GroupVersionKind = CRDGroupVersion.WithKind(Pipe_Kind)
)

func init() {
	SchemeBuilder.Register(&Pipe{}, &PipeList{})
}
