// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StageInitParameters struct {

	// (String) A unique ID assigned to the specific stage. The ID has the following format: <snowflakeAccount>SFCRole=<snowflakeRoleId><randomId>
	// A unique ID assigned to the specific stage. The ID has the following format: &lt;snowflakeAccount&gt;_SFCRole=&lt;snowflakeRoleId&gt;_&lt;randomId&gt;
	AwsExternalID *string `json:"awsExternalId,omitempty" tf:"aws_external_id,omitempty"`

	// (String) Specifies a comment for the stage.
	// Specifies a comment for the stage.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Specifies the copy options for the stage.
	// Specifies the copy options for the stage.
	CopyOptions *string `json:"copyOptions,omitempty" tf:"copy_options,omitempty"`

	// (String, Sensitive) Specifies the credentials for the stage.
	// Specifies the credentials for the stage.
	CredentialsSecretRef *v1.SecretKeySelector `json:"credentialsSecretRef,omitempty" tf:"-"`

	// (String) The database in which to create the stage.
	// The database in which to create the stage.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Specifies the directory settings for the stage.
	// Specifies the directory settings for the stage.
	Directory *string `json:"directory,omitempty" tf:"directory,omitempty"`

	// (String) Specifies the encryption settings for the stage.
	// Specifies the encryption settings for the stage.
	Encryption *string `json:"encryption,omitempty" tf:"encryption,omitempty"`

	// (String) Specifies the file format for the stage. Specifying the default Snowflake value (e.g. TYPE = CSV) will currently result in a permadiff (check #2679). For now, omit the default values; it will be fixed in the upcoming provider versions. Examples of usage: 1. with hardcoding value: file_format="FORMAT_NAME = DB.SCHEMA.FORMATNAME" 2. from dynamic value: file_format = "FORMAT_NAME = ${snowflake_file_format.myfileformat.fully_qualified_name}" 3. from expression: file_format = format("FORMAT_NAME =%s.%s.MYFILEFORMAT", var.db_name, each.value.schema_name). Reference: #265
	// Specifies the file format for the stage. Specifying the default Snowflake value (e.g. TYPE = CSV) will currently result in a permadiff (check [#2679](https://github. For now, omit the default values; it will be fixed in the upcoming provider versions. Examples of usage: <b>1. with hardcoding value:</b> `file_format="FORMAT_NAME = DB.SCHEMA.FORMATNAME"` <b>2. from dynamic value:</b> `file_format = "FORMAT_NAME = ${snowflake_file_format.myfileformat.fully_qualified_name}"` <b>3. from expression:</b> `file_format = format("FORMAT_NAME =%s.%s.MYFILEFORMAT", var.db_name, each.value.schema_name)`. Reference: [#265](https://github
	FileFormat *string `json:"fileFormat,omitempty" tf:"file_format,omitempty"`

	// (String) Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.
	// Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The schema in which to create the stage.
	// The schema in which to create the stage.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your account.
	// An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your account.
	SnowflakeIAMUser *string `json:"snowflakeIamUser,omitempty" tf:"snowflake_iam_user,omitempty"`

	// (String) Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.
	// Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.
	StorageIntegration *string `json:"storageIntegration,omitempty" tf:"storage_integration,omitempty"`

	// (Block List, Deprecated) Definitions of a tag to associate with the resource. (see below for nested schema)
	// Definitions of a tag to associate with the resource.
	Tag []TagInitParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// (String) Specifies the URL for the stage.
	// Specifies the URL for the stage.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type StageObservation struct {

	// (String) A unique ID assigned to the specific stage. The ID has the following format: <snowflakeAccount>SFCRole=<snowflakeRoleId><randomId>
	// A unique ID assigned to the specific stage. The ID has the following format: &lt;snowflakeAccount&gt;_SFCRole=&lt;snowflakeRoleId&gt;_&lt;randomId&gt;
	AwsExternalID *string `json:"awsExternalId,omitempty" tf:"aws_external_id,omitempty"`

	// (String) Specifies a comment for the stage.
	// Specifies a comment for the stage.
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Specifies the copy options for the stage.
	// Specifies the copy options for the stage.
	CopyOptions *string `json:"copyOptions,omitempty" tf:"copy_options,omitempty"`

	// (String) The database in which to create the stage.
	// The database in which to create the stage.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Specifies the directory settings for the stage.
	// Specifies the directory settings for the stage.
	Directory *string `json:"directory,omitempty" tf:"directory,omitempty"`

	// (String) Specifies the encryption settings for the stage.
	// Specifies the encryption settings for the stage.
	Encryption *string `json:"encryption,omitempty" tf:"encryption,omitempty"`

	// (String) Specifies the file format for the stage. Specifying the default Snowflake value (e.g. TYPE = CSV) will currently result in a permadiff (check #2679). For now, omit the default values; it will be fixed in the upcoming provider versions. Examples of usage: 1. with hardcoding value: file_format="FORMAT_NAME = DB.SCHEMA.FORMATNAME" 2. from dynamic value: file_format = "FORMAT_NAME = ${snowflake_file_format.myfileformat.fully_qualified_name}" 3. from expression: file_format = format("FORMAT_NAME =%s.%s.MYFILEFORMAT", var.db_name, each.value.schema_name). Reference: #265
	// Specifies the file format for the stage. Specifying the default Snowflake value (e.g. TYPE = CSV) will currently result in a permadiff (check [#2679](https://github. For now, omit the default values; it will be fixed in the upcoming provider versions. Examples of usage: <b>1. with hardcoding value:</b> `file_format="FORMAT_NAME = DB.SCHEMA.FORMATNAME"` <b>2. from dynamic value:</b> `file_format = "FORMAT_NAME = ${snowflake_file_format.myfileformat.fully_qualified_name}"` <b>3. from expression:</b> `file_format = format("FORMAT_NAME =%s.%s.MYFILEFORMAT", var.db_name, each.value.schema_name)`. Reference: [#265](https://github
	FileFormat *string `json:"fileFormat,omitempty" tf:"file_format,omitempty"`

	// (String) Fully qualified name of the resource. For more information, see object name resolution.
	// Fully qualified name of the resource. For more information, see [object name resolution](https://docs.snowflake.com/en/sql-reference/name-resolution).
	FullyQualifiedName *string `json:"fullyQualifiedName,omitempty" tf:"fully_qualified_name,omitempty"`

	// (String) The ID of this resource.
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// (String) Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.
	// Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The schema in which to create the stage.
	// The schema in which to create the stage.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your account.
	// An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your account.
	SnowflakeIAMUser *string `json:"snowflakeIamUser,omitempty" tf:"snowflake_iam_user,omitempty"`

	// (String) Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.
	// Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.
	StorageIntegration *string `json:"storageIntegration,omitempty" tf:"storage_integration,omitempty"`

	// (Block List, Deprecated) Definitions of a tag to associate with the resource. (see below for nested schema)
	// Definitions of a tag to associate with the resource.
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// (String) Specifies the URL for the stage.
	// Specifies the URL for the stage.
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type StageParameters struct {

	// (String) A unique ID assigned to the specific stage. The ID has the following format: <snowflakeAccount>SFCRole=<snowflakeRoleId><randomId>
	// A unique ID assigned to the specific stage. The ID has the following format: &lt;snowflakeAccount&gt;_SFCRole=&lt;snowflakeRoleId&gt;_&lt;randomId&gt;
	// +kubebuilder:validation:Optional
	AwsExternalID *string `json:"awsExternalId,omitempty" tf:"aws_external_id,omitempty"`

	// (String) Specifies a comment for the stage.
	// Specifies a comment for the stage.
	// +kubebuilder:validation:Optional
	Comment *string `json:"comment,omitempty" tf:"comment,omitempty"`

	// (String) Specifies the copy options for the stage.
	// Specifies the copy options for the stage.
	// +kubebuilder:validation:Optional
	CopyOptions *string `json:"copyOptions,omitempty" tf:"copy_options,omitempty"`

	// (String, Sensitive) Specifies the credentials for the stage.
	// Specifies the credentials for the stage.
	// +kubebuilder:validation:Optional
	CredentialsSecretRef *v1.SecretKeySelector `json:"credentialsSecretRef,omitempty" tf:"-"`

	// (String) The database in which to create the stage.
	// The database in which to create the stage.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Specifies the directory settings for the stage.
	// Specifies the directory settings for the stage.
	// +kubebuilder:validation:Optional
	Directory *string `json:"directory,omitempty" tf:"directory,omitempty"`

	// (String) Specifies the encryption settings for the stage.
	// Specifies the encryption settings for the stage.
	// +kubebuilder:validation:Optional
	Encryption *string `json:"encryption,omitempty" tf:"encryption,omitempty"`

	// (String) Specifies the file format for the stage. Specifying the default Snowflake value (e.g. TYPE = CSV) will currently result in a permadiff (check #2679). For now, omit the default values; it will be fixed in the upcoming provider versions. Examples of usage: 1. with hardcoding value: file_format="FORMAT_NAME = DB.SCHEMA.FORMATNAME" 2. from dynamic value: file_format = "FORMAT_NAME = ${snowflake_file_format.myfileformat.fully_qualified_name}" 3. from expression: file_format = format("FORMAT_NAME =%s.%s.MYFILEFORMAT", var.db_name, each.value.schema_name). Reference: #265
	// Specifies the file format for the stage. Specifying the default Snowflake value (e.g. TYPE = CSV) will currently result in a permadiff (check [#2679](https://github. For now, omit the default values; it will be fixed in the upcoming provider versions. Examples of usage: <b>1. with hardcoding value:</b> `file_format="FORMAT_NAME = DB.SCHEMA.FORMATNAME"` <b>2. from dynamic value:</b> `file_format = "FORMAT_NAME = ${snowflake_file_format.myfileformat.fully_qualified_name}"` <b>3. from expression:</b> `file_format = format("FORMAT_NAME =%s.%s.MYFILEFORMAT", var.db_name, each.value.schema_name)`. Reference: [#265](https://github
	// +kubebuilder:validation:Optional
	FileFormat *string `json:"fileFormat,omitempty" tf:"file_format,omitempty"`

	// (String) Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.
	// Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The schema in which to create the stage.
	// The schema in which to create the stage.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your account.
	// An AWS IAM user created for your Snowflake account. This user is the same for every external S3 stage created in your account.
	// +kubebuilder:validation:Optional
	SnowflakeIAMUser *string `json:"snowflakeIamUser,omitempty" tf:"snowflake_iam_user,omitempty"`

	// (String) Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.
	// Specifies the name of the storage integration used to delegate authentication responsibility for external cloud storage to a Snowflake identity and access management (IAM) entity.
	// +kubebuilder:validation:Optional
	StorageIntegration *string `json:"storageIntegration,omitempty" tf:"storage_integration,omitempty"`

	// (Block List, Deprecated) Definitions of a tag to associate with the resource. (see below for nested schema)
	// Definitions of a tag to associate with the resource.
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// (String) Specifies the URL for the stage.
	// Specifies the URL for the stage.
	// +kubebuilder:validation:Optional
	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type TagInitParameters struct {

	// (String) The database in which to create the stage.
	// Name of the database that the tag was created in.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.
	// Tag name, e.g. department.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The schema in which to create the stage.
	// Name of the schema that the tag was created in.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) Tag value, e.g. marketing_info.
	// Tag value, e.g. marketing_info.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagObservation struct {

	// (String) The database in which to create the stage.
	// Name of the database that the tag was created in.
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.
	// Tag name, e.g. department.
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// (String) The schema in which to create the stage.
	// Name of the schema that the tag was created in.
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) Tag value, e.g. marketing_info.
	// Tag value, e.g. marketing_info.
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagParameters struct {

	// (String) The database in which to create the stage.
	// Name of the database that the tag was created in.
	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// (String) Specifies the identifier for the stage; must be unique for the database and schema in which the stage is created.
	// Tag name, e.g. department.
	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// (String) The schema in which to create the stage.
	// Name of the schema that the tag was created in.
	// +kubebuilder:validation:Optional
	Schema *string `json:"schema,omitempty" tf:"schema,omitempty"`

	// (String) Tag value, e.g. marketing_info.
	// Tag value, e.g. marketing_info.
	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// StageSpec defines the desired state of Stage
type StageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StageParameters `json:"forProvider"`
	// THIS IS A BETA FIELD. It will be honored
	// unless the Management Policies feature flag is disabled.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StageInitParameters `json:"initProvider,omitempty"`
}

// StageStatus defines the observed state of Stage.
type StageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true
// +kubebuilder:subresource:status
// +kubebuilder:storageversion

// Stage is the Schema for the Stages API.
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,snowflake}
type Stage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.database) || (has(self.initProvider) && has(self.initProvider.database))",message="spec.forProvider.database is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || (has(self.initProvider) && has(self.initProvider.name))",message="spec.forProvider.name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.schema) || (has(self.initProvider) && has(self.initProvider.schema))",message="spec.forProvider.schema is a required parameter"
	Spec   StageSpec   `json:"spec"`
	Status StageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StageList contains a list of Stages
type StageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Stage `json:"items"`
}

// Repository type metadata.
var (
	Stage_Kind             = "Stage"
	Stage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Stage_Kind}.String()
	Stage_KindAPIVersion   = Stage_Kind + "." + CRDGroupVersion.String()
	Stage_GroupVersionKind = CRDGroupVersion.WithKind(Stage_Kind)
)

func init() {
	SchemeBuilder.Register(&Stage{}, &StageList{})
}
