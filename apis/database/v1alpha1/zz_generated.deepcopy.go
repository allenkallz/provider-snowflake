//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	"github.com/crossplane/crossplane-runtime/apis/common/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Database) DeepCopyInto(out *Database) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Database.
func (in *Database) DeepCopy() *Database {
	if in == nil {
		return nil
	}
	out := new(Database)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Database) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseInitParameters) DeepCopyInto(out *DatabaseInitParameters) {
	*out = *in
	if in.Catalog != nil {
		in, out := &in.Catalog, &out.Catalog
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DataRetentionTimeInDays != nil {
		in, out := &in.DataRetentionTimeInDays, &out.DataRetentionTimeInDays
		*out = new(float64)
		**out = **in
	}
	if in.DefaultDdlCollation != nil {
		in, out := &in.DefaultDdlCollation, &out.DefaultDdlCollation
		*out = new(string)
		**out = **in
	}
	if in.DropPublicSchemaOnCreation != nil {
		in, out := &in.DropPublicSchemaOnCreation, &out.DropPublicSchemaOnCreation
		*out = new(bool)
		**out = **in
	}
	if in.EnableConsoleOutput != nil {
		in, out := &in.EnableConsoleOutput, &out.EnableConsoleOutput
		*out = new(bool)
		**out = **in
	}
	if in.ExternalVolume != nil {
		in, out := &in.ExternalVolume, &out.ExternalVolume
		*out = new(string)
		**out = **in
	}
	if in.IsTransient != nil {
		in, out := &in.IsTransient, &out.IsTransient
		*out = new(bool)
		**out = **in
	}
	if in.LogLevel != nil {
		in, out := &in.LogLevel, &out.LogLevel
		*out = new(string)
		**out = **in
	}
	if in.MaxDataExtensionTimeInDays != nil {
		in, out := &in.MaxDataExtensionTimeInDays, &out.MaxDataExtensionTimeInDays
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.QuotedIdentifiersIgnoreCase != nil {
		in, out := &in.QuotedIdentifiersIgnoreCase, &out.QuotedIdentifiersIgnoreCase
		*out = new(bool)
		**out = **in
	}
	if in.ReplaceInvalidCharacters != nil {
		in, out := &in.ReplaceInvalidCharacters, &out.ReplaceInvalidCharacters
		*out = new(bool)
		**out = **in
	}
	if in.Replication != nil {
		in, out := &in.Replication, &out.Replication
		*out = make([]ReplicationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StorageSerializationPolicy != nil {
		in, out := &in.StorageSerializationPolicy, &out.StorageSerializationPolicy
		*out = new(string)
		**out = **in
	}
	if in.SuspendTaskAfterNumFailures != nil {
		in, out := &in.SuspendTaskAfterNumFailures, &out.SuspendTaskAfterNumFailures
		*out = new(float64)
		**out = **in
	}
	if in.TaskAutoRetryAttempts != nil {
		in, out := &in.TaskAutoRetryAttempts, &out.TaskAutoRetryAttempts
		*out = new(float64)
		**out = **in
	}
	if in.TraceLevel != nil {
		in, out := &in.TraceLevel, &out.TraceLevel
		*out = new(string)
		**out = **in
	}
	if in.UserTaskManagedInitialWarehouseSize != nil {
		in, out := &in.UserTaskManagedInitialWarehouseSize, &out.UserTaskManagedInitialWarehouseSize
		*out = new(string)
		**out = **in
	}
	if in.UserTaskMinimumTriggerIntervalInSeconds != nil {
		in, out := &in.UserTaskMinimumTriggerIntervalInSeconds, &out.UserTaskMinimumTriggerIntervalInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.UserTaskTimeoutMs != nil {
		in, out := &in.UserTaskTimeoutMs, &out.UserTaskTimeoutMs
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseInitParameters.
func (in *DatabaseInitParameters) DeepCopy() *DatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseList) DeepCopyInto(out *DatabaseList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Database, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseList.
func (in *DatabaseList) DeepCopy() *DatabaseList {
	if in == nil {
		return nil
	}
	out := new(DatabaseList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseObservation) DeepCopyInto(out *DatabaseObservation) {
	*out = *in
	if in.Catalog != nil {
		in, out := &in.Catalog, &out.Catalog
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DataRetentionTimeInDays != nil {
		in, out := &in.DataRetentionTimeInDays, &out.DataRetentionTimeInDays
		*out = new(float64)
		**out = **in
	}
	if in.DefaultDdlCollation != nil {
		in, out := &in.DefaultDdlCollation, &out.DefaultDdlCollation
		*out = new(string)
		**out = **in
	}
	if in.DropPublicSchemaOnCreation != nil {
		in, out := &in.DropPublicSchemaOnCreation, &out.DropPublicSchemaOnCreation
		*out = new(bool)
		**out = **in
	}
	if in.EnableConsoleOutput != nil {
		in, out := &in.EnableConsoleOutput, &out.EnableConsoleOutput
		*out = new(bool)
		**out = **in
	}
	if in.ExternalVolume != nil {
		in, out := &in.ExternalVolume, &out.ExternalVolume
		*out = new(string)
		**out = **in
	}
	if in.FullyQualifiedName != nil {
		in, out := &in.FullyQualifiedName, &out.FullyQualifiedName
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsTransient != nil {
		in, out := &in.IsTransient, &out.IsTransient
		*out = new(bool)
		**out = **in
	}
	if in.LogLevel != nil {
		in, out := &in.LogLevel, &out.LogLevel
		*out = new(string)
		**out = **in
	}
	if in.MaxDataExtensionTimeInDays != nil {
		in, out := &in.MaxDataExtensionTimeInDays, &out.MaxDataExtensionTimeInDays
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.QuotedIdentifiersIgnoreCase != nil {
		in, out := &in.QuotedIdentifiersIgnoreCase, &out.QuotedIdentifiersIgnoreCase
		*out = new(bool)
		**out = **in
	}
	if in.ReplaceInvalidCharacters != nil {
		in, out := &in.ReplaceInvalidCharacters, &out.ReplaceInvalidCharacters
		*out = new(bool)
		**out = **in
	}
	if in.Replication != nil {
		in, out := &in.Replication, &out.Replication
		*out = make([]ReplicationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StorageSerializationPolicy != nil {
		in, out := &in.StorageSerializationPolicy, &out.StorageSerializationPolicy
		*out = new(string)
		**out = **in
	}
	if in.SuspendTaskAfterNumFailures != nil {
		in, out := &in.SuspendTaskAfterNumFailures, &out.SuspendTaskAfterNumFailures
		*out = new(float64)
		**out = **in
	}
	if in.TaskAutoRetryAttempts != nil {
		in, out := &in.TaskAutoRetryAttempts, &out.TaskAutoRetryAttempts
		*out = new(float64)
		**out = **in
	}
	if in.TraceLevel != nil {
		in, out := &in.TraceLevel, &out.TraceLevel
		*out = new(string)
		**out = **in
	}
	if in.UserTaskManagedInitialWarehouseSize != nil {
		in, out := &in.UserTaskManagedInitialWarehouseSize, &out.UserTaskManagedInitialWarehouseSize
		*out = new(string)
		**out = **in
	}
	if in.UserTaskMinimumTriggerIntervalInSeconds != nil {
		in, out := &in.UserTaskMinimumTriggerIntervalInSeconds, &out.UserTaskMinimumTriggerIntervalInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.UserTaskTimeoutMs != nil {
		in, out := &in.UserTaskTimeoutMs, &out.UserTaskTimeoutMs
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseObservation.
func (in *DatabaseObservation) DeepCopy() *DatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(DatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseParameters) DeepCopyInto(out *DatabaseParameters) {
	*out = *in
	if in.Catalog != nil {
		in, out := &in.Catalog, &out.Catalog
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DataRetentionTimeInDays != nil {
		in, out := &in.DataRetentionTimeInDays, &out.DataRetentionTimeInDays
		*out = new(float64)
		**out = **in
	}
	if in.DefaultDdlCollation != nil {
		in, out := &in.DefaultDdlCollation, &out.DefaultDdlCollation
		*out = new(string)
		**out = **in
	}
	if in.DropPublicSchemaOnCreation != nil {
		in, out := &in.DropPublicSchemaOnCreation, &out.DropPublicSchemaOnCreation
		*out = new(bool)
		**out = **in
	}
	if in.EnableConsoleOutput != nil {
		in, out := &in.EnableConsoleOutput, &out.EnableConsoleOutput
		*out = new(bool)
		**out = **in
	}
	if in.ExternalVolume != nil {
		in, out := &in.ExternalVolume, &out.ExternalVolume
		*out = new(string)
		**out = **in
	}
	if in.IsTransient != nil {
		in, out := &in.IsTransient, &out.IsTransient
		*out = new(bool)
		**out = **in
	}
	if in.LogLevel != nil {
		in, out := &in.LogLevel, &out.LogLevel
		*out = new(string)
		**out = **in
	}
	if in.MaxDataExtensionTimeInDays != nil {
		in, out := &in.MaxDataExtensionTimeInDays, &out.MaxDataExtensionTimeInDays
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.QuotedIdentifiersIgnoreCase != nil {
		in, out := &in.QuotedIdentifiersIgnoreCase, &out.QuotedIdentifiersIgnoreCase
		*out = new(bool)
		**out = **in
	}
	if in.ReplaceInvalidCharacters != nil {
		in, out := &in.ReplaceInvalidCharacters, &out.ReplaceInvalidCharacters
		*out = new(bool)
		**out = **in
	}
	if in.Replication != nil {
		in, out := &in.Replication, &out.Replication
		*out = make([]ReplicationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StorageSerializationPolicy != nil {
		in, out := &in.StorageSerializationPolicy, &out.StorageSerializationPolicy
		*out = new(string)
		**out = **in
	}
	if in.SuspendTaskAfterNumFailures != nil {
		in, out := &in.SuspendTaskAfterNumFailures, &out.SuspendTaskAfterNumFailures
		*out = new(float64)
		**out = **in
	}
	if in.TaskAutoRetryAttempts != nil {
		in, out := &in.TaskAutoRetryAttempts, &out.TaskAutoRetryAttempts
		*out = new(float64)
		**out = **in
	}
	if in.TraceLevel != nil {
		in, out := &in.TraceLevel, &out.TraceLevel
		*out = new(string)
		**out = **in
	}
	if in.UserTaskManagedInitialWarehouseSize != nil {
		in, out := &in.UserTaskManagedInitialWarehouseSize, &out.UserTaskManagedInitialWarehouseSize
		*out = new(string)
		**out = **in
	}
	if in.UserTaskMinimumTriggerIntervalInSeconds != nil {
		in, out := &in.UserTaskMinimumTriggerIntervalInSeconds, &out.UserTaskMinimumTriggerIntervalInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.UserTaskTimeoutMs != nil {
		in, out := &in.UserTaskTimeoutMs, &out.UserTaskTimeoutMs
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseParameters.
func (in *DatabaseParameters) DeepCopy() *DatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseRole) DeepCopyInto(out *DatabaseRole) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseRole.
func (in *DatabaseRole) DeepCopy() *DatabaseRole {
	if in == nil {
		return nil
	}
	out := new(DatabaseRole)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseRole) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseRoleInitParameters) DeepCopyInto(out *DatabaseRoleInitParameters) {
	*out = *in
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseRoleInitParameters.
func (in *DatabaseRoleInitParameters) DeepCopy() *DatabaseRoleInitParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseRoleInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseRoleList) DeepCopyInto(out *DatabaseRoleList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]DatabaseRole, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseRoleList.
func (in *DatabaseRoleList) DeepCopy() *DatabaseRoleList {
	if in == nil {
		return nil
	}
	out := new(DatabaseRoleList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseRoleList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseRoleObservation) DeepCopyInto(out *DatabaseRoleObservation) {
	*out = *in
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.FullyQualifiedName != nil {
		in, out := &in.FullyQualifiedName, &out.FullyQualifiedName
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.ShowOutput != nil {
		in, out := &in.ShowOutput, &out.ShowOutput
		*out = make([]ShowOutputObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseRoleObservation.
func (in *DatabaseRoleObservation) DeepCopy() *DatabaseRoleObservation {
	if in == nil {
		return nil
	}
	out := new(DatabaseRoleObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseRoleParameters) DeepCopyInto(out *DatabaseRoleParameters) {
	*out = *in
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseRoleParameters.
func (in *DatabaseRoleParameters) DeepCopy() *DatabaseRoleParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseRoleParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseRoleSpec) DeepCopyInto(out *DatabaseRoleSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseRoleSpec.
func (in *DatabaseRoleSpec) DeepCopy() *DatabaseRoleSpec {
	if in == nil {
		return nil
	}
	out := new(DatabaseRoleSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseRoleStatus) DeepCopyInto(out *DatabaseRoleStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseRoleStatus.
func (in *DatabaseRoleStatus) DeepCopy() *DatabaseRoleStatus {
	if in == nil {
		return nil
	}
	out := new(DatabaseRoleStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpec) DeepCopyInto(out *DatabaseSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpec.
func (in *DatabaseSpec) DeepCopy() *DatabaseSpec {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseStatus) DeepCopyInto(out *DatabaseStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseStatus.
func (in *DatabaseStatus) DeepCopy() *DatabaseStatus {
	if in == nil {
		return nil
	}
	out := new(DatabaseStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnableToAccountInitParameters) DeepCopyInto(out *EnableToAccountInitParameters) {
	*out = *in
	if in.AccountIdentifier != nil {
		in, out := &in.AccountIdentifier, &out.AccountIdentifier
		*out = new(string)
		**out = **in
	}
	if in.WithFailover != nil {
		in, out := &in.WithFailover, &out.WithFailover
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnableToAccountInitParameters.
func (in *EnableToAccountInitParameters) DeepCopy() *EnableToAccountInitParameters {
	if in == nil {
		return nil
	}
	out := new(EnableToAccountInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnableToAccountObservation) DeepCopyInto(out *EnableToAccountObservation) {
	*out = *in
	if in.AccountIdentifier != nil {
		in, out := &in.AccountIdentifier, &out.AccountIdentifier
		*out = new(string)
		**out = **in
	}
	if in.WithFailover != nil {
		in, out := &in.WithFailover, &out.WithFailover
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnableToAccountObservation.
func (in *EnableToAccountObservation) DeepCopy() *EnableToAccountObservation {
	if in == nil {
		return nil
	}
	out := new(EnableToAccountObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnableToAccountParameters) DeepCopyInto(out *EnableToAccountParameters) {
	*out = *in
	if in.AccountIdentifier != nil {
		in, out := &in.AccountIdentifier, &out.AccountIdentifier
		*out = new(string)
		**out = **in
	}
	if in.WithFailover != nil {
		in, out := &in.WithFailover, &out.WithFailover
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnableToAccountParameters.
func (in *EnableToAccountParameters) DeepCopy() *EnableToAccountParameters {
	if in == nil {
		return nil
	}
	out := new(EnableToAccountParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileFormat) DeepCopyInto(out *FileFormat) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileFormat.
func (in *FileFormat) DeepCopy() *FileFormat {
	if in == nil {
		return nil
	}
	out := new(FileFormat)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *FileFormat) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileFormatInitParameters) DeepCopyInto(out *FileFormatInitParameters) {
	*out = *in
	if in.AllowDuplicate != nil {
		in, out := &in.AllowDuplicate, &out.AllowDuplicate
		*out = new(bool)
		**out = **in
	}
	if in.BinaryAsText != nil {
		in, out := &in.BinaryAsText, &out.BinaryAsText
		*out = new(bool)
		**out = **in
	}
	if in.BinaryFormat != nil {
		in, out := &in.BinaryFormat, &out.BinaryFormat
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.DateFormat != nil {
		in, out := &in.DateFormat, &out.DateFormat
		*out = new(string)
		**out = **in
	}
	if in.DisableAutoConvert != nil {
		in, out := &in.DisableAutoConvert, &out.DisableAutoConvert
		*out = new(bool)
		**out = **in
	}
	if in.DisableSnowflakeData != nil {
		in, out := &in.DisableSnowflakeData, &out.DisableSnowflakeData
		*out = new(bool)
		**out = **in
	}
	if in.EmptyFieldAsNull != nil {
		in, out := &in.EmptyFieldAsNull, &out.EmptyFieldAsNull
		*out = new(bool)
		**out = **in
	}
	if in.EnableOctal != nil {
		in, out := &in.EnableOctal, &out.EnableOctal
		*out = new(bool)
		**out = **in
	}
	if in.Encoding != nil {
		in, out := &in.Encoding, &out.Encoding
		*out = new(string)
		**out = **in
	}
	if in.ErrorOnColumnCountMismatch != nil {
		in, out := &in.ErrorOnColumnCountMismatch, &out.ErrorOnColumnCountMismatch
		*out = new(bool)
		**out = **in
	}
	if in.Escape != nil {
		in, out := &in.Escape, &out.Escape
		*out = new(string)
		**out = **in
	}
	if in.EscapeUnenclosedField != nil {
		in, out := &in.EscapeUnenclosedField, &out.EscapeUnenclosedField
		*out = new(string)
		**out = **in
	}
	if in.FieldDelimiter != nil {
		in, out := &in.FieldDelimiter, &out.FieldDelimiter
		*out = new(string)
		**out = **in
	}
	if in.FieldOptionallyEnclosedBy != nil {
		in, out := &in.FieldOptionallyEnclosedBy, &out.FieldOptionallyEnclosedBy
		*out = new(string)
		**out = **in
	}
	if in.FileExtension != nil {
		in, out := &in.FileExtension, &out.FileExtension
		*out = new(string)
		**out = **in
	}
	if in.FormatType != nil {
		in, out := &in.FormatType, &out.FormatType
		*out = new(string)
		**out = **in
	}
	if in.IgnoreUTF8Errors != nil {
		in, out := &in.IgnoreUTF8Errors, &out.IgnoreUTF8Errors
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NullIf != nil {
		in, out := &in.NullIf, &out.NullIf
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ParseHeader != nil {
		in, out := &in.ParseHeader, &out.ParseHeader
		*out = new(bool)
		**out = **in
	}
	if in.PreserveSpace != nil {
		in, out := &in.PreserveSpace, &out.PreserveSpace
		*out = new(bool)
		**out = **in
	}
	if in.RecordDelimiter != nil {
		in, out := &in.RecordDelimiter, &out.RecordDelimiter
		*out = new(string)
		**out = **in
	}
	if in.ReplaceInvalidCharacters != nil {
		in, out := &in.ReplaceInvalidCharacters, &out.ReplaceInvalidCharacters
		*out = new(bool)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
	if in.SkipBlankLines != nil {
		in, out := &in.SkipBlankLines, &out.SkipBlankLines
		*out = new(bool)
		**out = **in
	}
	if in.SkipByteOrderMark != nil {
		in, out := &in.SkipByteOrderMark, &out.SkipByteOrderMark
		*out = new(bool)
		**out = **in
	}
	if in.SkipHeader != nil {
		in, out := &in.SkipHeader, &out.SkipHeader
		*out = new(float64)
		**out = **in
	}
	if in.StripNullValues != nil {
		in, out := &in.StripNullValues, &out.StripNullValues
		*out = new(bool)
		**out = **in
	}
	if in.StripOuterArray != nil {
		in, out := &in.StripOuterArray, &out.StripOuterArray
		*out = new(bool)
		**out = **in
	}
	if in.StripOuterElement != nil {
		in, out := &in.StripOuterElement, &out.StripOuterElement
		*out = new(bool)
		**out = **in
	}
	if in.TimeFormat != nil {
		in, out := &in.TimeFormat, &out.TimeFormat
		*out = new(string)
		**out = **in
	}
	if in.TimestampFormat != nil {
		in, out := &in.TimestampFormat, &out.TimestampFormat
		*out = new(string)
		**out = **in
	}
	if in.TrimSpace != nil {
		in, out := &in.TrimSpace, &out.TrimSpace
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileFormatInitParameters.
func (in *FileFormatInitParameters) DeepCopy() *FileFormatInitParameters {
	if in == nil {
		return nil
	}
	out := new(FileFormatInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileFormatList) DeepCopyInto(out *FileFormatList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]FileFormat, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileFormatList.
func (in *FileFormatList) DeepCopy() *FileFormatList {
	if in == nil {
		return nil
	}
	out := new(FileFormatList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *FileFormatList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileFormatObservation) DeepCopyInto(out *FileFormatObservation) {
	*out = *in
	if in.AllowDuplicate != nil {
		in, out := &in.AllowDuplicate, &out.AllowDuplicate
		*out = new(bool)
		**out = **in
	}
	if in.BinaryAsText != nil {
		in, out := &in.BinaryAsText, &out.BinaryAsText
		*out = new(bool)
		**out = **in
	}
	if in.BinaryFormat != nil {
		in, out := &in.BinaryFormat, &out.BinaryFormat
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.DateFormat != nil {
		in, out := &in.DateFormat, &out.DateFormat
		*out = new(string)
		**out = **in
	}
	if in.DisableAutoConvert != nil {
		in, out := &in.DisableAutoConvert, &out.DisableAutoConvert
		*out = new(bool)
		**out = **in
	}
	if in.DisableSnowflakeData != nil {
		in, out := &in.DisableSnowflakeData, &out.DisableSnowflakeData
		*out = new(bool)
		**out = **in
	}
	if in.EmptyFieldAsNull != nil {
		in, out := &in.EmptyFieldAsNull, &out.EmptyFieldAsNull
		*out = new(bool)
		**out = **in
	}
	if in.EnableOctal != nil {
		in, out := &in.EnableOctal, &out.EnableOctal
		*out = new(bool)
		**out = **in
	}
	if in.Encoding != nil {
		in, out := &in.Encoding, &out.Encoding
		*out = new(string)
		**out = **in
	}
	if in.ErrorOnColumnCountMismatch != nil {
		in, out := &in.ErrorOnColumnCountMismatch, &out.ErrorOnColumnCountMismatch
		*out = new(bool)
		**out = **in
	}
	if in.Escape != nil {
		in, out := &in.Escape, &out.Escape
		*out = new(string)
		**out = **in
	}
	if in.EscapeUnenclosedField != nil {
		in, out := &in.EscapeUnenclosedField, &out.EscapeUnenclosedField
		*out = new(string)
		**out = **in
	}
	if in.FieldDelimiter != nil {
		in, out := &in.FieldDelimiter, &out.FieldDelimiter
		*out = new(string)
		**out = **in
	}
	if in.FieldOptionallyEnclosedBy != nil {
		in, out := &in.FieldOptionallyEnclosedBy, &out.FieldOptionallyEnclosedBy
		*out = new(string)
		**out = **in
	}
	if in.FileExtension != nil {
		in, out := &in.FileExtension, &out.FileExtension
		*out = new(string)
		**out = **in
	}
	if in.FormatType != nil {
		in, out := &in.FormatType, &out.FormatType
		*out = new(string)
		**out = **in
	}
	if in.FullyQualifiedName != nil {
		in, out := &in.FullyQualifiedName, &out.FullyQualifiedName
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IgnoreUTF8Errors != nil {
		in, out := &in.IgnoreUTF8Errors, &out.IgnoreUTF8Errors
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NullIf != nil {
		in, out := &in.NullIf, &out.NullIf
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ParseHeader != nil {
		in, out := &in.ParseHeader, &out.ParseHeader
		*out = new(bool)
		**out = **in
	}
	if in.PreserveSpace != nil {
		in, out := &in.PreserveSpace, &out.PreserveSpace
		*out = new(bool)
		**out = **in
	}
	if in.RecordDelimiter != nil {
		in, out := &in.RecordDelimiter, &out.RecordDelimiter
		*out = new(string)
		**out = **in
	}
	if in.ReplaceInvalidCharacters != nil {
		in, out := &in.ReplaceInvalidCharacters, &out.ReplaceInvalidCharacters
		*out = new(bool)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
	if in.SkipBlankLines != nil {
		in, out := &in.SkipBlankLines, &out.SkipBlankLines
		*out = new(bool)
		**out = **in
	}
	if in.SkipByteOrderMark != nil {
		in, out := &in.SkipByteOrderMark, &out.SkipByteOrderMark
		*out = new(bool)
		**out = **in
	}
	if in.SkipHeader != nil {
		in, out := &in.SkipHeader, &out.SkipHeader
		*out = new(float64)
		**out = **in
	}
	if in.StripNullValues != nil {
		in, out := &in.StripNullValues, &out.StripNullValues
		*out = new(bool)
		**out = **in
	}
	if in.StripOuterArray != nil {
		in, out := &in.StripOuterArray, &out.StripOuterArray
		*out = new(bool)
		**out = **in
	}
	if in.StripOuterElement != nil {
		in, out := &in.StripOuterElement, &out.StripOuterElement
		*out = new(bool)
		**out = **in
	}
	if in.TimeFormat != nil {
		in, out := &in.TimeFormat, &out.TimeFormat
		*out = new(string)
		**out = **in
	}
	if in.TimestampFormat != nil {
		in, out := &in.TimestampFormat, &out.TimestampFormat
		*out = new(string)
		**out = **in
	}
	if in.TrimSpace != nil {
		in, out := &in.TrimSpace, &out.TrimSpace
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileFormatObservation.
func (in *FileFormatObservation) DeepCopy() *FileFormatObservation {
	if in == nil {
		return nil
	}
	out := new(FileFormatObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileFormatParameters) DeepCopyInto(out *FileFormatParameters) {
	*out = *in
	if in.AllowDuplicate != nil {
		in, out := &in.AllowDuplicate, &out.AllowDuplicate
		*out = new(bool)
		**out = **in
	}
	if in.BinaryAsText != nil {
		in, out := &in.BinaryAsText, &out.BinaryAsText
		*out = new(bool)
		**out = **in
	}
	if in.BinaryFormat != nil {
		in, out := &in.BinaryFormat, &out.BinaryFormat
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.DateFormat != nil {
		in, out := &in.DateFormat, &out.DateFormat
		*out = new(string)
		**out = **in
	}
	if in.DisableAutoConvert != nil {
		in, out := &in.DisableAutoConvert, &out.DisableAutoConvert
		*out = new(bool)
		**out = **in
	}
	if in.DisableSnowflakeData != nil {
		in, out := &in.DisableSnowflakeData, &out.DisableSnowflakeData
		*out = new(bool)
		**out = **in
	}
	if in.EmptyFieldAsNull != nil {
		in, out := &in.EmptyFieldAsNull, &out.EmptyFieldAsNull
		*out = new(bool)
		**out = **in
	}
	if in.EnableOctal != nil {
		in, out := &in.EnableOctal, &out.EnableOctal
		*out = new(bool)
		**out = **in
	}
	if in.Encoding != nil {
		in, out := &in.Encoding, &out.Encoding
		*out = new(string)
		**out = **in
	}
	if in.ErrorOnColumnCountMismatch != nil {
		in, out := &in.ErrorOnColumnCountMismatch, &out.ErrorOnColumnCountMismatch
		*out = new(bool)
		**out = **in
	}
	if in.Escape != nil {
		in, out := &in.Escape, &out.Escape
		*out = new(string)
		**out = **in
	}
	if in.EscapeUnenclosedField != nil {
		in, out := &in.EscapeUnenclosedField, &out.EscapeUnenclosedField
		*out = new(string)
		**out = **in
	}
	if in.FieldDelimiter != nil {
		in, out := &in.FieldDelimiter, &out.FieldDelimiter
		*out = new(string)
		**out = **in
	}
	if in.FieldOptionallyEnclosedBy != nil {
		in, out := &in.FieldOptionallyEnclosedBy, &out.FieldOptionallyEnclosedBy
		*out = new(string)
		**out = **in
	}
	if in.FileExtension != nil {
		in, out := &in.FileExtension, &out.FileExtension
		*out = new(string)
		**out = **in
	}
	if in.FormatType != nil {
		in, out := &in.FormatType, &out.FormatType
		*out = new(string)
		**out = **in
	}
	if in.IgnoreUTF8Errors != nil {
		in, out := &in.IgnoreUTF8Errors, &out.IgnoreUTF8Errors
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NullIf != nil {
		in, out := &in.NullIf, &out.NullIf
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ParseHeader != nil {
		in, out := &in.ParseHeader, &out.ParseHeader
		*out = new(bool)
		**out = **in
	}
	if in.PreserveSpace != nil {
		in, out := &in.PreserveSpace, &out.PreserveSpace
		*out = new(bool)
		**out = **in
	}
	if in.RecordDelimiter != nil {
		in, out := &in.RecordDelimiter, &out.RecordDelimiter
		*out = new(string)
		**out = **in
	}
	if in.ReplaceInvalidCharacters != nil {
		in, out := &in.ReplaceInvalidCharacters, &out.ReplaceInvalidCharacters
		*out = new(bool)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
	if in.SkipBlankLines != nil {
		in, out := &in.SkipBlankLines, &out.SkipBlankLines
		*out = new(bool)
		**out = **in
	}
	if in.SkipByteOrderMark != nil {
		in, out := &in.SkipByteOrderMark, &out.SkipByteOrderMark
		*out = new(bool)
		**out = **in
	}
	if in.SkipHeader != nil {
		in, out := &in.SkipHeader, &out.SkipHeader
		*out = new(float64)
		**out = **in
	}
	if in.StripNullValues != nil {
		in, out := &in.StripNullValues, &out.StripNullValues
		*out = new(bool)
		**out = **in
	}
	if in.StripOuterArray != nil {
		in, out := &in.StripOuterArray, &out.StripOuterArray
		*out = new(bool)
		**out = **in
	}
	if in.StripOuterElement != nil {
		in, out := &in.StripOuterElement, &out.StripOuterElement
		*out = new(bool)
		**out = **in
	}
	if in.TimeFormat != nil {
		in, out := &in.TimeFormat, &out.TimeFormat
		*out = new(string)
		**out = **in
	}
	if in.TimestampFormat != nil {
		in, out := &in.TimestampFormat, &out.TimestampFormat
		*out = new(string)
		**out = **in
	}
	if in.TrimSpace != nil {
		in, out := &in.TrimSpace, &out.TrimSpace
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileFormatParameters.
func (in *FileFormatParameters) DeepCopy() *FileFormatParameters {
	if in == nil {
		return nil
	}
	out := new(FileFormatParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileFormatSpec) DeepCopyInto(out *FileFormatSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileFormatSpec.
func (in *FileFormatSpec) DeepCopy() *FileFormatSpec {
	if in == nil {
		return nil
	}
	out := new(FileFormatSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileFormatStatus) DeepCopyInto(out *FileFormatStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileFormatStatus.
func (in *FileFormatStatus) DeepCopy() *FileFormatStatus {
	if in == nil {
		return nil
	}
	out := new(FileFormatStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Pipe) DeepCopyInto(out *Pipe) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Pipe.
func (in *Pipe) DeepCopy() *Pipe {
	if in == nil {
		return nil
	}
	out := new(Pipe)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Pipe) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PipeInitParameters) DeepCopyInto(out *PipeInitParameters) {
	*out = *in
	if in.AutoIngest != nil {
		in, out := &in.AutoIngest, &out.AutoIngest
		*out = new(bool)
		**out = **in
	}
	if in.AwsSnsTopicArn != nil {
		in, out := &in.AwsSnsTopicArn, &out.AwsSnsTopicArn
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.CopyStatement != nil {
		in, out := &in.CopyStatement, &out.CopyStatement
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.ErrorIntegration != nil {
		in, out := &in.ErrorIntegration, &out.ErrorIntegration
		*out = new(string)
		**out = **in
	}
	if in.Integration != nil {
		in, out := &in.Integration, &out.Integration
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PipeInitParameters.
func (in *PipeInitParameters) DeepCopy() *PipeInitParameters {
	if in == nil {
		return nil
	}
	out := new(PipeInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PipeList) DeepCopyInto(out *PipeList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Pipe, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PipeList.
func (in *PipeList) DeepCopy() *PipeList {
	if in == nil {
		return nil
	}
	out := new(PipeList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *PipeList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PipeObservation) DeepCopyInto(out *PipeObservation) {
	*out = *in
	if in.AutoIngest != nil {
		in, out := &in.AutoIngest, &out.AutoIngest
		*out = new(bool)
		**out = **in
	}
	if in.AwsSnsTopicArn != nil {
		in, out := &in.AwsSnsTopicArn, &out.AwsSnsTopicArn
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.CopyStatement != nil {
		in, out := &in.CopyStatement, &out.CopyStatement
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.ErrorIntegration != nil {
		in, out := &in.ErrorIntegration, &out.ErrorIntegration
		*out = new(string)
		**out = **in
	}
	if in.FullyQualifiedName != nil {
		in, out := &in.FullyQualifiedName, &out.FullyQualifiedName
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Integration != nil {
		in, out := &in.Integration, &out.Integration
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NotificationChannel != nil {
		in, out := &in.NotificationChannel, &out.NotificationChannel
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(string)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PipeObservation.
func (in *PipeObservation) DeepCopy() *PipeObservation {
	if in == nil {
		return nil
	}
	out := new(PipeObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PipeParameters) DeepCopyInto(out *PipeParameters) {
	*out = *in
	if in.AutoIngest != nil {
		in, out := &in.AutoIngest, &out.AutoIngest
		*out = new(bool)
		**out = **in
	}
	if in.AwsSnsTopicArn != nil {
		in, out := &in.AwsSnsTopicArn, &out.AwsSnsTopicArn
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.CopyStatement != nil {
		in, out := &in.CopyStatement, &out.CopyStatement
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.ErrorIntegration != nil {
		in, out := &in.ErrorIntegration, &out.ErrorIntegration
		*out = new(string)
		**out = **in
	}
	if in.Integration != nil {
		in, out := &in.Integration, &out.Integration
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PipeParameters.
func (in *PipeParameters) DeepCopy() *PipeParameters {
	if in == nil {
		return nil
	}
	out := new(PipeParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PipeSpec) DeepCopyInto(out *PipeSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PipeSpec.
func (in *PipeSpec) DeepCopy() *PipeSpec {
	if in == nil {
		return nil
	}
	out := new(PipeSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *PipeStatus) DeepCopyInto(out *PipeStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new PipeStatus.
func (in *PipeStatus) DeepCopy() *PipeStatus {
	if in == nil {
		return nil
	}
	out := new(PipeStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReplicationInitParameters) DeepCopyInto(out *ReplicationInitParameters) {
	*out = *in
	if in.EnableToAccount != nil {
		in, out := &in.EnableToAccount, &out.EnableToAccount
		*out = make([]EnableToAccountInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IgnoreEditionCheck != nil {
		in, out := &in.IgnoreEditionCheck, &out.IgnoreEditionCheck
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReplicationInitParameters.
func (in *ReplicationInitParameters) DeepCopy() *ReplicationInitParameters {
	if in == nil {
		return nil
	}
	out := new(ReplicationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReplicationObservation) DeepCopyInto(out *ReplicationObservation) {
	*out = *in
	if in.EnableToAccount != nil {
		in, out := &in.EnableToAccount, &out.EnableToAccount
		*out = make([]EnableToAccountObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IgnoreEditionCheck != nil {
		in, out := &in.IgnoreEditionCheck, &out.IgnoreEditionCheck
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReplicationObservation.
func (in *ReplicationObservation) DeepCopy() *ReplicationObservation {
	if in == nil {
		return nil
	}
	out := new(ReplicationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReplicationParameters) DeepCopyInto(out *ReplicationParameters) {
	*out = *in
	if in.EnableToAccount != nil {
		in, out := &in.EnableToAccount, &out.EnableToAccount
		*out = make([]EnableToAccountParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IgnoreEditionCheck != nil {
		in, out := &in.IgnoreEditionCheck, &out.IgnoreEditionCheck
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReplicationParameters.
func (in *ReplicationParameters) DeepCopy() *ReplicationParameters {
	if in == nil {
		return nil
	}
	out := new(ReplicationParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShowOutputInitParameters) DeepCopyInto(out *ShowOutputInitParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShowOutputInitParameters.
func (in *ShowOutputInitParameters) DeepCopy() *ShowOutputInitParameters {
	if in == nil {
		return nil
	}
	out := new(ShowOutputInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShowOutputObservation) DeepCopyInto(out *ShowOutputObservation) {
	*out = *in
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.CreatedOn != nil {
		in, out := &in.CreatedOn, &out.CreatedOn
		*out = new(string)
		**out = **in
	}
	if in.DatabaseName != nil {
		in, out := &in.DatabaseName, &out.DatabaseName
		*out = new(string)
		**out = **in
	}
	if in.GrantedDatabaseRoles != nil {
		in, out := &in.GrantedDatabaseRoles, &out.GrantedDatabaseRoles
		*out = new(float64)
		**out = **in
	}
	if in.GrantedToDatabaseRoles != nil {
		in, out := &in.GrantedToDatabaseRoles, &out.GrantedToDatabaseRoles
		*out = new(float64)
		**out = **in
	}
	if in.GrantedToRoles != nil {
		in, out := &in.GrantedToRoles, &out.GrantedToRoles
		*out = new(float64)
		**out = **in
	}
	if in.IsCurrent != nil {
		in, out := &in.IsCurrent, &out.IsCurrent
		*out = new(bool)
		**out = **in
	}
	if in.IsDefault != nil {
		in, out := &in.IsDefault, &out.IsDefault
		*out = new(bool)
		**out = **in
	}
	if in.IsInherited != nil {
		in, out := &in.IsInherited, &out.IsInherited
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Owner != nil {
		in, out := &in.Owner, &out.Owner
		*out = new(string)
		**out = **in
	}
	if in.OwnerRoleType != nil {
		in, out := &in.OwnerRoleType, &out.OwnerRoleType
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShowOutputObservation.
func (in *ShowOutputObservation) DeepCopy() *ShowOutputObservation {
	if in == nil {
		return nil
	}
	out := new(ShowOutputObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ShowOutputParameters) DeepCopyInto(out *ShowOutputParameters) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ShowOutputParameters.
func (in *ShowOutputParameters) DeepCopy() *ShowOutputParameters {
	if in == nil {
		return nil
	}
	out := new(ShowOutputParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Stage) DeepCopyInto(out *Stage) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Stage.
func (in *Stage) DeepCopy() *Stage {
	if in == nil {
		return nil
	}
	out := new(Stage)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Stage) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StageInitParameters) DeepCopyInto(out *StageInitParameters) {
	*out = *in
	if in.AwsExternalID != nil {
		in, out := &in.AwsExternalID, &out.AwsExternalID
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.CopyOptions != nil {
		in, out := &in.CopyOptions, &out.CopyOptions
		*out = new(string)
		**out = **in
	}
	if in.CredentialsSecretRef != nil {
		in, out := &in.CredentialsSecretRef, &out.CredentialsSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.Directory != nil {
		in, out := &in.Directory, &out.Directory
		*out = new(string)
		**out = **in
	}
	if in.Encryption != nil {
		in, out := &in.Encryption, &out.Encryption
		*out = new(string)
		**out = **in
	}
	if in.FileFormat != nil {
		in, out := &in.FileFormat, &out.FileFormat
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
	if in.SnowflakeIAMUser != nil {
		in, out := &in.SnowflakeIAMUser, &out.SnowflakeIAMUser
		*out = new(string)
		**out = **in
	}
	if in.StorageIntegration != nil {
		in, out := &in.StorageIntegration, &out.StorageIntegration
		*out = new(string)
		**out = **in
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = make([]TagInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StageInitParameters.
func (in *StageInitParameters) DeepCopy() *StageInitParameters {
	if in == nil {
		return nil
	}
	out := new(StageInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StageList) DeepCopyInto(out *StageList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Stage, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StageList.
func (in *StageList) DeepCopy() *StageList {
	if in == nil {
		return nil
	}
	out := new(StageList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *StageList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StageObservation) DeepCopyInto(out *StageObservation) {
	*out = *in
	if in.AwsExternalID != nil {
		in, out := &in.AwsExternalID, &out.AwsExternalID
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.CopyOptions != nil {
		in, out := &in.CopyOptions, &out.CopyOptions
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.Directory != nil {
		in, out := &in.Directory, &out.Directory
		*out = new(string)
		**out = **in
	}
	if in.Encryption != nil {
		in, out := &in.Encryption, &out.Encryption
		*out = new(string)
		**out = **in
	}
	if in.FileFormat != nil {
		in, out := &in.FileFormat, &out.FileFormat
		*out = new(string)
		**out = **in
	}
	if in.FullyQualifiedName != nil {
		in, out := &in.FullyQualifiedName, &out.FullyQualifiedName
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
	if in.SnowflakeIAMUser != nil {
		in, out := &in.SnowflakeIAMUser, &out.SnowflakeIAMUser
		*out = new(string)
		**out = **in
	}
	if in.StorageIntegration != nil {
		in, out := &in.StorageIntegration, &out.StorageIntegration
		*out = new(string)
		**out = **in
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = make([]TagObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StageObservation.
func (in *StageObservation) DeepCopy() *StageObservation {
	if in == nil {
		return nil
	}
	out := new(StageObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StageParameters) DeepCopyInto(out *StageParameters) {
	*out = *in
	if in.AwsExternalID != nil {
		in, out := &in.AwsExternalID, &out.AwsExternalID
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.CopyOptions != nil {
		in, out := &in.CopyOptions, &out.CopyOptions
		*out = new(string)
		**out = **in
	}
	if in.CredentialsSecretRef != nil {
		in, out := &in.CredentialsSecretRef, &out.CredentialsSecretRef
		*out = new(v1.SecretKeySelector)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.Directory != nil {
		in, out := &in.Directory, &out.Directory
		*out = new(string)
		**out = **in
	}
	if in.Encryption != nil {
		in, out := &in.Encryption, &out.Encryption
		*out = new(string)
		**out = **in
	}
	if in.FileFormat != nil {
		in, out := &in.FileFormat, &out.FileFormat
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
	if in.SnowflakeIAMUser != nil {
		in, out := &in.SnowflakeIAMUser, &out.SnowflakeIAMUser
		*out = new(string)
		**out = **in
	}
	if in.StorageIntegration != nil {
		in, out := &in.StorageIntegration, &out.StorageIntegration
		*out = new(string)
		**out = **in
	}
	if in.Tag != nil {
		in, out := &in.Tag, &out.Tag
		*out = make([]TagParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.URL != nil {
		in, out := &in.URL, &out.URL
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StageParameters.
func (in *StageParameters) DeepCopy() *StageParameters {
	if in == nil {
		return nil
	}
	out := new(StageParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StageSpec) DeepCopyInto(out *StageSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StageSpec.
func (in *StageSpec) DeepCopy() *StageSpec {
	if in == nil {
		return nil
	}
	out := new(StageSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *StageStatus) DeepCopyInto(out *StageStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new StageStatus.
func (in *StageStatus) DeepCopy() *StageStatus {
	if in == nil {
		return nil
	}
	out := new(StageStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TagInitParameters) DeepCopyInto(out *TagInitParameters) {
	*out = *in
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TagInitParameters.
func (in *TagInitParameters) DeepCopy() *TagInitParameters {
	if in == nil {
		return nil
	}
	out := new(TagInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TagObservation) DeepCopyInto(out *TagObservation) {
	*out = *in
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TagObservation.
func (in *TagObservation) DeepCopy() *TagObservation {
	if in == nil {
		return nil
	}
	out := new(TagObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *TagParameters) DeepCopyInto(out *TagParameters) {
	*out = *in
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
	if in.Value != nil {
		in, out := &in.Value, &out.Value
		*out = new(string)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new TagParameters.
func (in *TagParameters) DeepCopy() *TagParameters {
	if in == nil {
		return nil
	}
	out := new(TagParameters)
	in.DeepCopyInto(out)
	return out
}
