//go:build !ignore_autogenerated

// SPDX-FileCopyrightText: 2024 The Crossplane Authors <https://crossplane.io>
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *Database) DeepCopyInto(out *Database) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new Database.
func (in *Database) DeepCopy() *Database {
	if in == nil {
		return nil
	}
	out := new(Database)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *Database) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseInitParameters) DeepCopyInto(out *DatabaseInitParameters) {
	*out = *in
	if in.Catalog != nil {
		in, out := &in.Catalog, &out.Catalog
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DataRetentionTimeInDays != nil {
		in, out := &in.DataRetentionTimeInDays, &out.DataRetentionTimeInDays
		*out = new(float64)
		**out = **in
	}
	if in.DefaultDdlCollation != nil {
		in, out := &in.DefaultDdlCollation, &out.DefaultDdlCollation
		*out = new(string)
		**out = **in
	}
	if in.DropPublicSchemaOnCreation != nil {
		in, out := &in.DropPublicSchemaOnCreation, &out.DropPublicSchemaOnCreation
		*out = new(bool)
		**out = **in
	}
	if in.EnableConsoleOutput != nil {
		in, out := &in.EnableConsoleOutput, &out.EnableConsoleOutput
		*out = new(bool)
		**out = **in
	}
	if in.ExternalVolume != nil {
		in, out := &in.ExternalVolume, &out.ExternalVolume
		*out = new(string)
		**out = **in
	}
	if in.IsTransient != nil {
		in, out := &in.IsTransient, &out.IsTransient
		*out = new(bool)
		**out = **in
	}
	if in.LogLevel != nil {
		in, out := &in.LogLevel, &out.LogLevel
		*out = new(string)
		**out = **in
	}
	if in.MaxDataExtensionTimeInDays != nil {
		in, out := &in.MaxDataExtensionTimeInDays, &out.MaxDataExtensionTimeInDays
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.QuotedIdentifiersIgnoreCase != nil {
		in, out := &in.QuotedIdentifiersIgnoreCase, &out.QuotedIdentifiersIgnoreCase
		*out = new(bool)
		**out = **in
	}
	if in.ReplaceInvalidCharacters != nil {
		in, out := &in.ReplaceInvalidCharacters, &out.ReplaceInvalidCharacters
		*out = new(bool)
		**out = **in
	}
	if in.Replication != nil {
		in, out := &in.Replication, &out.Replication
		*out = make([]ReplicationInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StorageSerializationPolicy != nil {
		in, out := &in.StorageSerializationPolicy, &out.StorageSerializationPolicy
		*out = new(string)
		**out = **in
	}
	if in.SuspendTaskAfterNumFailures != nil {
		in, out := &in.SuspendTaskAfterNumFailures, &out.SuspendTaskAfterNumFailures
		*out = new(float64)
		**out = **in
	}
	if in.TaskAutoRetryAttempts != nil {
		in, out := &in.TaskAutoRetryAttempts, &out.TaskAutoRetryAttempts
		*out = new(float64)
		**out = **in
	}
	if in.TraceLevel != nil {
		in, out := &in.TraceLevel, &out.TraceLevel
		*out = new(string)
		**out = **in
	}
	if in.UserTaskManagedInitialWarehouseSize != nil {
		in, out := &in.UserTaskManagedInitialWarehouseSize, &out.UserTaskManagedInitialWarehouseSize
		*out = new(string)
		**out = **in
	}
	if in.UserTaskMinimumTriggerIntervalInSeconds != nil {
		in, out := &in.UserTaskMinimumTriggerIntervalInSeconds, &out.UserTaskMinimumTriggerIntervalInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.UserTaskTimeoutMs != nil {
		in, out := &in.UserTaskTimeoutMs, &out.UserTaskTimeoutMs
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseInitParameters.
func (in *DatabaseInitParameters) DeepCopy() *DatabaseInitParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseList) DeepCopyInto(out *DatabaseList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]Database, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseList.
func (in *DatabaseList) DeepCopy() *DatabaseList {
	if in == nil {
		return nil
	}
	out := new(DatabaseList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *DatabaseList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseObservation) DeepCopyInto(out *DatabaseObservation) {
	*out = *in
	if in.Catalog != nil {
		in, out := &in.Catalog, &out.Catalog
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DataRetentionTimeInDays != nil {
		in, out := &in.DataRetentionTimeInDays, &out.DataRetentionTimeInDays
		*out = new(float64)
		**out = **in
	}
	if in.DefaultDdlCollation != nil {
		in, out := &in.DefaultDdlCollation, &out.DefaultDdlCollation
		*out = new(string)
		**out = **in
	}
	if in.DropPublicSchemaOnCreation != nil {
		in, out := &in.DropPublicSchemaOnCreation, &out.DropPublicSchemaOnCreation
		*out = new(bool)
		**out = **in
	}
	if in.EnableConsoleOutput != nil {
		in, out := &in.EnableConsoleOutput, &out.EnableConsoleOutput
		*out = new(bool)
		**out = **in
	}
	if in.ExternalVolume != nil {
		in, out := &in.ExternalVolume, &out.ExternalVolume
		*out = new(string)
		**out = **in
	}
	if in.FullyQualifiedName != nil {
		in, out := &in.FullyQualifiedName, &out.FullyQualifiedName
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IsTransient != nil {
		in, out := &in.IsTransient, &out.IsTransient
		*out = new(bool)
		**out = **in
	}
	if in.LogLevel != nil {
		in, out := &in.LogLevel, &out.LogLevel
		*out = new(string)
		**out = **in
	}
	if in.MaxDataExtensionTimeInDays != nil {
		in, out := &in.MaxDataExtensionTimeInDays, &out.MaxDataExtensionTimeInDays
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.QuotedIdentifiersIgnoreCase != nil {
		in, out := &in.QuotedIdentifiersIgnoreCase, &out.QuotedIdentifiersIgnoreCase
		*out = new(bool)
		**out = **in
	}
	if in.ReplaceInvalidCharacters != nil {
		in, out := &in.ReplaceInvalidCharacters, &out.ReplaceInvalidCharacters
		*out = new(bool)
		**out = **in
	}
	if in.Replication != nil {
		in, out := &in.Replication, &out.Replication
		*out = make([]ReplicationObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StorageSerializationPolicy != nil {
		in, out := &in.StorageSerializationPolicy, &out.StorageSerializationPolicy
		*out = new(string)
		**out = **in
	}
	if in.SuspendTaskAfterNumFailures != nil {
		in, out := &in.SuspendTaskAfterNumFailures, &out.SuspendTaskAfterNumFailures
		*out = new(float64)
		**out = **in
	}
	if in.TaskAutoRetryAttempts != nil {
		in, out := &in.TaskAutoRetryAttempts, &out.TaskAutoRetryAttempts
		*out = new(float64)
		**out = **in
	}
	if in.TraceLevel != nil {
		in, out := &in.TraceLevel, &out.TraceLevel
		*out = new(string)
		**out = **in
	}
	if in.UserTaskManagedInitialWarehouseSize != nil {
		in, out := &in.UserTaskManagedInitialWarehouseSize, &out.UserTaskManagedInitialWarehouseSize
		*out = new(string)
		**out = **in
	}
	if in.UserTaskMinimumTriggerIntervalInSeconds != nil {
		in, out := &in.UserTaskMinimumTriggerIntervalInSeconds, &out.UserTaskMinimumTriggerIntervalInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.UserTaskTimeoutMs != nil {
		in, out := &in.UserTaskTimeoutMs, &out.UserTaskTimeoutMs
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseObservation.
func (in *DatabaseObservation) DeepCopy() *DatabaseObservation {
	if in == nil {
		return nil
	}
	out := new(DatabaseObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseParameters) DeepCopyInto(out *DatabaseParameters) {
	*out = *in
	if in.Catalog != nil {
		in, out := &in.Catalog, &out.Catalog
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.DataRetentionTimeInDays != nil {
		in, out := &in.DataRetentionTimeInDays, &out.DataRetentionTimeInDays
		*out = new(float64)
		**out = **in
	}
	if in.DefaultDdlCollation != nil {
		in, out := &in.DefaultDdlCollation, &out.DefaultDdlCollation
		*out = new(string)
		**out = **in
	}
	if in.DropPublicSchemaOnCreation != nil {
		in, out := &in.DropPublicSchemaOnCreation, &out.DropPublicSchemaOnCreation
		*out = new(bool)
		**out = **in
	}
	if in.EnableConsoleOutput != nil {
		in, out := &in.EnableConsoleOutput, &out.EnableConsoleOutput
		*out = new(bool)
		**out = **in
	}
	if in.ExternalVolume != nil {
		in, out := &in.ExternalVolume, &out.ExternalVolume
		*out = new(string)
		**out = **in
	}
	if in.IsTransient != nil {
		in, out := &in.IsTransient, &out.IsTransient
		*out = new(bool)
		**out = **in
	}
	if in.LogLevel != nil {
		in, out := &in.LogLevel, &out.LogLevel
		*out = new(string)
		**out = **in
	}
	if in.MaxDataExtensionTimeInDays != nil {
		in, out := &in.MaxDataExtensionTimeInDays, &out.MaxDataExtensionTimeInDays
		*out = new(float64)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.QuotedIdentifiersIgnoreCase != nil {
		in, out := &in.QuotedIdentifiersIgnoreCase, &out.QuotedIdentifiersIgnoreCase
		*out = new(bool)
		**out = **in
	}
	if in.ReplaceInvalidCharacters != nil {
		in, out := &in.ReplaceInvalidCharacters, &out.ReplaceInvalidCharacters
		*out = new(bool)
		**out = **in
	}
	if in.Replication != nil {
		in, out := &in.Replication, &out.Replication
		*out = make([]ReplicationParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.StorageSerializationPolicy != nil {
		in, out := &in.StorageSerializationPolicy, &out.StorageSerializationPolicy
		*out = new(string)
		**out = **in
	}
	if in.SuspendTaskAfterNumFailures != nil {
		in, out := &in.SuspendTaskAfterNumFailures, &out.SuspendTaskAfterNumFailures
		*out = new(float64)
		**out = **in
	}
	if in.TaskAutoRetryAttempts != nil {
		in, out := &in.TaskAutoRetryAttempts, &out.TaskAutoRetryAttempts
		*out = new(float64)
		**out = **in
	}
	if in.TraceLevel != nil {
		in, out := &in.TraceLevel, &out.TraceLevel
		*out = new(string)
		**out = **in
	}
	if in.UserTaskManagedInitialWarehouseSize != nil {
		in, out := &in.UserTaskManagedInitialWarehouseSize, &out.UserTaskManagedInitialWarehouseSize
		*out = new(string)
		**out = **in
	}
	if in.UserTaskMinimumTriggerIntervalInSeconds != nil {
		in, out := &in.UserTaskMinimumTriggerIntervalInSeconds, &out.UserTaskMinimumTriggerIntervalInSeconds
		*out = new(float64)
		**out = **in
	}
	if in.UserTaskTimeoutMs != nil {
		in, out := &in.UserTaskTimeoutMs, &out.UserTaskTimeoutMs
		*out = new(float64)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseParameters.
func (in *DatabaseParameters) DeepCopy() *DatabaseParameters {
	if in == nil {
		return nil
	}
	out := new(DatabaseParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseSpec) DeepCopyInto(out *DatabaseSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseSpec.
func (in *DatabaseSpec) DeepCopy() *DatabaseSpec {
	if in == nil {
		return nil
	}
	out := new(DatabaseSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *DatabaseStatus) DeepCopyInto(out *DatabaseStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new DatabaseStatus.
func (in *DatabaseStatus) DeepCopy() *DatabaseStatus {
	if in == nil {
		return nil
	}
	out := new(DatabaseStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnableToAccountInitParameters) DeepCopyInto(out *EnableToAccountInitParameters) {
	*out = *in
	if in.AccountIdentifier != nil {
		in, out := &in.AccountIdentifier, &out.AccountIdentifier
		*out = new(string)
		**out = **in
	}
	if in.WithFailover != nil {
		in, out := &in.WithFailover, &out.WithFailover
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnableToAccountInitParameters.
func (in *EnableToAccountInitParameters) DeepCopy() *EnableToAccountInitParameters {
	if in == nil {
		return nil
	}
	out := new(EnableToAccountInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnableToAccountObservation) DeepCopyInto(out *EnableToAccountObservation) {
	*out = *in
	if in.AccountIdentifier != nil {
		in, out := &in.AccountIdentifier, &out.AccountIdentifier
		*out = new(string)
		**out = **in
	}
	if in.WithFailover != nil {
		in, out := &in.WithFailover, &out.WithFailover
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnableToAccountObservation.
func (in *EnableToAccountObservation) DeepCopy() *EnableToAccountObservation {
	if in == nil {
		return nil
	}
	out := new(EnableToAccountObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *EnableToAccountParameters) DeepCopyInto(out *EnableToAccountParameters) {
	*out = *in
	if in.AccountIdentifier != nil {
		in, out := &in.AccountIdentifier, &out.AccountIdentifier
		*out = new(string)
		**out = **in
	}
	if in.WithFailover != nil {
		in, out := &in.WithFailover, &out.WithFailover
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new EnableToAccountParameters.
func (in *EnableToAccountParameters) DeepCopy() *EnableToAccountParameters {
	if in == nil {
		return nil
	}
	out := new(EnableToAccountParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileFormat) DeepCopyInto(out *FileFormat) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileFormat.
func (in *FileFormat) DeepCopy() *FileFormat {
	if in == nil {
		return nil
	}
	out := new(FileFormat)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *FileFormat) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileFormatInitParameters) DeepCopyInto(out *FileFormatInitParameters) {
	*out = *in
	if in.AllowDuplicate != nil {
		in, out := &in.AllowDuplicate, &out.AllowDuplicate
		*out = new(bool)
		**out = **in
	}
	if in.BinaryAsText != nil {
		in, out := &in.BinaryAsText, &out.BinaryAsText
		*out = new(bool)
		**out = **in
	}
	if in.BinaryFormat != nil {
		in, out := &in.BinaryFormat, &out.BinaryFormat
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.DateFormat != nil {
		in, out := &in.DateFormat, &out.DateFormat
		*out = new(string)
		**out = **in
	}
	if in.DisableAutoConvert != nil {
		in, out := &in.DisableAutoConvert, &out.DisableAutoConvert
		*out = new(bool)
		**out = **in
	}
	if in.DisableSnowflakeData != nil {
		in, out := &in.DisableSnowflakeData, &out.DisableSnowflakeData
		*out = new(bool)
		**out = **in
	}
	if in.EmptyFieldAsNull != nil {
		in, out := &in.EmptyFieldAsNull, &out.EmptyFieldAsNull
		*out = new(bool)
		**out = **in
	}
	if in.EnableOctal != nil {
		in, out := &in.EnableOctal, &out.EnableOctal
		*out = new(bool)
		**out = **in
	}
	if in.Encoding != nil {
		in, out := &in.Encoding, &out.Encoding
		*out = new(string)
		**out = **in
	}
	if in.ErrorOnColumnCountMismatch != nil {
		in, out := &in.ErrorOnColumnCountMismatch, &out.ErrorOnColumnCountMismatch
		*out = new(bool)
		**out = **in
	}
	if in.Escape != nil {
		in, out := &in.Escape, &out.Escape
		*out = new(string)
		**out = **in
	}
	if in.EscapeUnenclosedField != nil {
		in, out := &in.EscapeUnenclosedField, &out.EscapeUnenclosedField
		*out = new(string)
		**out = **in
	}
	if in.FieldDelimiter != nil {
		in, out := &in.FieldDelimiter, &out.FieldDelimiter
		*out = new(string)
		**out = **in
	}
	if in.FieldOptionallyEnclosedBy != nil {
		in, out := &in.FieldOptionallyEnclosedBy, &out.FieldOptionallyEnclosedBy
		*out = new(string)
		**out = **in
	}
	if in.FileExtension != nil {
		in, out := &in.FileExtension, &out.FileExtension
		*out = new(string)
		**out = **in
	}
	if in.FormatType != nil {
		in, out := &in.FormatType, &out.FormatType
		*out = new(string)
		**out = **in
	}
	if in.IgnoreUTF8Errors != nil {
		in, out := &in.IgnoreUTF8Errors, &out.IgnoreUTF8Errors
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NullIf != nil {
		in, out := &in.NullIf, &out.NullIf
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ParseHeader != nil {
		in, out := &in.ParseHeader, &out.ParseHeader
		*out = new(bool)
		**out = **in
	}
	if in.PreserveSpace != nil {
		in, out := &in.PreserveSpace, &out.PreserveSpace
		*out = new(bool)
		**out = **in
	}
	if in.RecordDelimiter != nil {
		in, out := &in.RecordDelimiter, &out.RecordDelimiter
		*out = new(string)
		**out = **in
	}
	if in.ReplaceInvalidCharacters != nil {
		in, out := &in.ReplaceInvalidCharacters, &out.ReplaceInvalidCharacters
		*out = new(bool)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
	if in.SkipBlankLines != nil {
		in, out := &in.SkipBlankLines, &out.SkipBlankLines
		*out = new(bool)
		**out = **in
	}
	if in.SkipByteOrderMark != nil {
		in, out := &in.SkipByteOrderMark, &out.SkipByteOrderMark
		*out = new(bool)
		**out = **in
	}
	if in.SkipHeader != nil {
		in, out := &in.SkipHeader, &out.SkipHeader
		*out = new(float64)
		**out = **in
	}
	if in.StripNullValues != nil {
		in, out := &in.StripNullValues, &out.StripNullValues
		*out = new(bool)
		**out = **in
	}
	if in.StripOuterArray != nil {
		in, out := &in.StripOuterArray, &out.StripOuterArray
		*out = new(bool)
		**out = **in
	}
	if in.StripOuterElement != nil {
		in, out := &in.StripOuterElement, &out.StripOuterElement
		*out = new(bool)
		**out = **in
	}
	if in.TimeFormat != nil {
		in, out := &in.TimeFormat, &out.TimeFormat
		*out = new(string)
		**out = **in
	}
	if in.TimestampFormat != nil {
		in, out := &in.TimestampFormat, &out.TimestampFormat
		*out = new(string)
		**out = **in
	}
	if in.TrimSpace != nil {
		in, out := &in.TrimSpace, &out.TrimSpace
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileFormatInitParameters.
func (in *FileFormatInitParameters) DeepCopy() *FileFormatInitParameters {
	if in == nil {
		return nil
	}
	out := new(FileFormatInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileFormatList) DeepCopyInto(out *FileFormatList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]FileFormat, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileFormatList.
func (in *FileFormatList) DeepCopy() *FileFormatList {
	if in == nil {
		return nil
	}
	out := new(FileFormatList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *FileFormatList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileFormatObservation) DeepCopyInto(out *FileFormatObservation) {
	*out = *in
	if in.AllowDuplicate != nil {
		in, out := &in.AllowDuplicate, &out.AllowDuplicate
		*out = new(bool)
		**out = **in
	}
	if in.BinaryAsText != nil {
		in, out := &in.BinaryAsText, &out.BinaryAsText
		*out = new(bool)
		**out = **in
	}
	if in.BinaryFormat != nil {
		in, out := &in.BinaryFormat, &out.BinaryFormat
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.DateFormat != nil {
		in, out := &in.DateFormat, &out.DateFormat
		*out = new(string)
		**out = **in
	}
	if in.DisableAutoConvert != nil {
		in, out := &in.DisableAutoConvert, &out.DisableAutoConvert
		*out = new(bool)
		**out = **in
	}
	if in.DisableSnowflakeData != nil {
		in, out := &in.DisableSnowflakeData, &out.DisableSnowflakeData
		*out = new(bool)
		**out = **in
	}
	if in.EmptyFieldAsNull != nil {
		in, out := &in.EmptyFieldAsNull, &out.EmptyFieldAsNull
		*out = new(bool)
		**out = **in
	}
	if in.EnableOctal != nil {
		in, out := &in.EnableOctal, &out.EnableOctal
		*out = new(bool)
		**out = **in
	}
	if in.Encoding != nil {
		in, out := &in.Encoding, &out.Encoding
		*out = new(string)
		**out = **in
	}
	if in.ErrorOnColumnCountMismatch != nil {
		in, out := &in.ErrorOnColumnCountMismatch, &out.ErrorOnColumnCountMismatch
		*out = new(bool)
		**out = **in
	}
	if in.Escape != nil {
		in, out := &in.Escape, &out.Escape
		*out = new(string)
		**out = **in
	}
	if in.EscapeUnenclosedField != nil {
		in, out := &in.EscapeUnenclosedField, &out.EscapeUnenclosedField
		*out = new(string)
		**out = **in
	}
	if in.FieldDelimiter != nil {
		in, out := &in.FieldDelimiter, &out.FieldDelimiter
		*out = new(string)
		**out = **in
	}
	if in.FieldOptionallyEnclosedBy != nil {
		in, out := &in.FieldOptionallyEnclosedBy, &out.FieldOptionallyEnclosedBy
		*out = new(string)
		**out = **in
	}
	if in.FileExtension != nil {
		in, out := &in.FileExtension, &out.FileExtension
		*out = new(string)
		**out = **in
	}
	if in.FormatType != nil {
		in, out := &in.FormatType, &out.FormatType
		*out = new(string)
		**out = **in
	}
	if in.FullyQualifiedName != nil {
		in, out := &in.FullyQualifiedName, &out.FullyQualifiedName
		*out = new(string)
		**out = **in
	}
	if in.ID != nil {
		in, out := &in.ID, &out.ID
		*out = new(string)
		**out = **in
	}
	if in.IgnoreUTF8Errors != nil {
		in, out := &in.IgnoreUTF8Errors, &out.IgnoreUTF8Errors
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NullIf != nil {
		in, out := &in.NullIf, &out.NullIf
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ParseHeader != nil {
		in, out := &in.ParseHeader, &out.ParseHeader
		*out = new(bool)
		**out = **in
	}
	if in.PreserveSpace != nil {
		in, out := &in.PreserveSpace, &out.PreserveSpace
		*out = new(bool)
		**out = **in
	}
	if in.RecordDelimiter != nil {
		in, out := &in.RecordDelimiter, &out.RecordDelimiter
		*out = new(string)
		**out = **in
	}
	if in.ReplaceInvalidCharacters != nil {
		in, out := &in.ReplaceInvalidCharacters, &out.ReplaceInvalidCharacters
		*out = new(bool)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
	if in.SkipBlankLines != nil {
		in, out := &in.SkipBlankLines, &out.SkipBlankLines
		*out = new(bool)
		**out = **in
	}
	if in.SkipByteOrderMark != nil {
		in, out := &in.SkipByteOrderMark, &out.SkipByteOrderMark
		*out = new(bool)
		**out = **in
	}
	if in.SkipHeader != nil {
		in, out := &in.SkipHeader, &out.SkipHeader
		*out = new(float64)
		**out = **in
	}
	if in.StripNullValues != nil {
		in, out := &in.StripNullValues, &out.StripNullValues
		*out = new(bool)
		**out = **in
	}
	if in.StripOuterArray != nil {
		in, out := &in.StripOuterArray, &out.StripOuterArray
		*out = new(bool)
		**out = **in
	}
	if in.StripOuterElement != nil {
		in, out := &in.StripOuterElement, &out.StripOuterElement
		*out = new(bool)
		**out = **in
	}
	if in.TimeFormat != nil {
		in, out := &in.TimeFormat, &out.TimeFormat
		*out = new(string)
		**out = **in
	}
	if in.TimestampFormat != nil {
		in, out := &in.TimestampFormat, &out.TimestampFormat
		*out = new(string)
		**out = **in
	}
	if in.TrimSpace != nil {
		in, out := &in.TrimSpace, &out.TrimSpace
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileFormatObservation.
func (in *FileFormatObservation) DeepCopy() *FileFormatObservation {
	if in == nil {
		return nil
	}
	out := new(FileFormatObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileFormatParameters) DeepCopyInto(out *FileFormatParameters) {
	*out = *in
	if in.AllowDuplicate != nil {
		in, out := &in.AllowDuplicate, &out.AllowDuplicate
		*out = new(bool)
		**out = **in
	}
	if in.BinaryAsText != nil {
		in, out := &in.BinaryAsText, &out.BinaryAsText
		*out = new(bool)
		**out = **in
	}
	if in.BinaryFormat != nil {
		in, out := &in.BinaryFormat, &out.BinaryFormat
		*out = new(string)
		**out = **in
	}
	if in.Comment != nil {
		in, out := &in.Comment, &out.Comment
		*out = new(string)
		**out = **in
	}
	if in.Compression != nil {
		in, out := &in.Compression, &out.Compression
		*out = new(string)
		**out = **in
	}
	if in.Database != nil {
		in, out := &in.Database, &out.Database
		*out = new(string)
		**out = **in
	}
	if in.DateFormat != nil {
		in, out := &in.DateFormat, &out.DateFormat
		*out = new(string)
		**out = **in
	}
	if in.DisableAutoConvert != nil {
		in, out := &in.DisableAutoConvert, &out.DisableAutoConvert
		*out = new(bool)
		**out = **in
	}
	if in.DisableSnowflakeData != nil {
		in, out := &in.DisableSnowflakeData, &out.DisableSnowflakeData
		*out = new(bool)
		**out = **in
	}
	if in.EmptyFieldAsNull != nil {
		in, out := &in.EmptyFieldAsNull, &out.EmptyFieldAsNull
		*out = new(bool)
		**out = **in
	}
	if in.EnableOctal != nil {
		in, out := &in.EnableOctal, &out.EnableOctal
		*out = new(bool)
		**out = **in
	}
	if in.Encoding != nil {
		in, out := &in.Encoding, &out.Encoding
		*out = new(string)
		**out = **in
	}
	if in.ErrorOnColumnCountMismatch != nil {
		in, out := &in.ErrorOnColumnCountMismatch, &out.ErrorOnColumnCountMismatch
		*out = new(bool)
		**out = **in
	}
	if in.Escape != nil {
		in, out := &in.Escape, &out.Escape
		*out = new(string)
		**out = **in
	}
	if in.EscapeUnenclosedField != nil {
		in, out := &in.EscapeUnenclosedField, &out.EscapeUnenclosedField
		*out = new(string)
		**out = **in
	}
	if in.FieldDelimiter != nil {
		in, out := &in.FieldDelimiter, &out.FieldDelimiter
		*out = new(string)
		**out = **in
	}
	if in.FieldOptionallyEnclosedBy != nil {
		in, out := &in.FieldOptionallyEnclosedBy, &out.FieldOptionallyEnclosedBy
		*out = new(string)
		**out = **in
	}
	if in.FileExtension != nil {
		in, out := &in.FileExtension, &out.FileExtension
		*out = new(string)
		**out = **in
	}
	if in.FormatType != nil {
		in, out := &in.FormatType, &out.FormatType
		*out = new(string)
		**out = **in
	}
	if in.IgnoreUTF8Errors != nil {
		in, out := &in.IgnoreUTF8Errors, &out.IgnoreUTF8Errors
		*out = new(bool)
		**out = **in
	}
	if in.Name != nil {
		in, out := &in.Name, &out.Name
		*out = new(string)
		**out = **in
	}
	if in.NullIf != nil {
		in, out := &in.NullIf, &out.NullIf
		*out = make([]*string, len(*in))
		for i := range *in {
			if (*in)[i] != nil {
				in, out := &(*in)[i], &(*out)[i]
				*out = new(string)
				**out = **in
			}
		}
	}
	if in.ParseHeader != nil {
		in, out := &in.ParseHeader, &out.ParseHeader
		*out = new(bool)
		**out = **in
	}
	if in.PreserveSpace != nil {
		in, out := &in.PreserveSpace, &out.PreserveSpace
		*out = new(bool)
		**out = **in
	}
	if in.RecordDelimiter != nil {
		in, out := &in.RecordDelimiter, &out.RecordDelimiter
		*out = new(string)
		**out = **in
	}
	if in.ReplaceInvalidCharacters != nil {
		in, out := &in.ReplaceInvalidCharacters, &out.ReplaceInvalidCharacters
		*out = new(bool)
		**out = **in
	}
	if in.Schema != nil {
		in, out := &in.Schema, &out.Schema
		*out = new(string)
		**out = **in
	}
	if in.SkipBlankLines != nil {
		in, out := &in.SkipBlankLines, &out.SkipBlankLines
		*out = new(bool)
		**out = **in
	}
	if in.SkipByteOrderMark != nil {
		in, out := &in.SkipByteOrderMark, &out.SkipByteOrderMark
		*out = new(bool)
		**out = **in
	}
	if in.SkipHeader != nil {
		in, out := &in.SkipHeader, &out.SkipHeader
		*out = new(float64)
		**out = **in
	}
	if in.StripNullValues != nil {
		in, out := &in.StripNullValues, &out.StripNullValues
		*out = new(bool)
		**out = **in
	}
	if in.StripOuterArray != nil {
		in, out := &in.StripOuterArray, &out.StripOuterArray
		*out = new(bool)
		**out = **in
	}
	if in.StripOuterElement != nil {
		in, out := &in.StripOuterElement, &out.StripOuterElement
		*out = new(bool)
		**out = **in
	}
	if in.TimeFormat != nil {
		in, out := &in.TimeFormat, &out.TimeFormat
		*out = new(string)
		**out = **in
	}
	if in.TimestampFormat != nil {
		in, out := &in.TimestampFormat, &out.TimestampFormat
		*out = new(string)
		**out = **in
	}
	if in.TrimSpace != nil {
		in, out := &in.TrimSpace, &out.TrimSpace
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileFormatParameters.
func (in *FileFormatParameters) DeepCopy() *FileFormatParameters {
	if in == nil {
		return nil
	}
	out := new(FileFormatParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileFormatSpec) DeepCopyInto(out *FileFormatSpec) {
	*out = *in
	in.ResourceSpec.DeepCopyInto(&out.ResourceSpec)
	in.ForProvider.DeepCopyInto(&out.ForProvider)
	in.InitProvider.DeepCopyInto(&out.InitProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileFormatSpec.
func (in *FileFormatSpec) DeepCopy() *FileFormatSpec {
	if in == nil {
		return nil
	}
	out := new(FileFormatSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *FileFormatStatus) DeepCopyInto(out *FileFormatStatus) {
	*out = *in
	in.ResourceStatus.DeepCopyInto(&out.ResourceStatus)
	in.AtProvider.DeepCopyInto(&out.AtProvider)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new FileFormatStatus.
func (in *FileFormatStatus) DeepCopy() *FileFormatStatus {
	if in == nil {
		return nil
	}
	out := new(FileFormatStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReplicationInitParameters) DeepCopyInto(out *ReplicationInitParameters) {
	*out = *in
	if in.EnableToAccount != nil {
		in, out := &in.EnableToAccount, &out.EnableToAccount
		*out = make([]EnableToAccountInitParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IgnoreEditionCheck != nil {
		in, out := &in.IgnoreEditionCheck, &out.IgnoreEditionCheck
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReplicationInitParameters.
func (in *ReplicationInitParameters) DeepCopy() *ReplicationInitParameters {
	if in == nil {
		return nil
	}
	out := new(ReplicationInitParameters)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReplicationObservation) DeepCopyInto(out *ReplicationObservation) {
	*out = *in
	if in.EnableToAccount != nil {
		in, out := &in.EnableToAccount, &out.EnableToAccount
		*out = make([]EnableToAccountObservation, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IgnoreEditionCheck != nil {
		in, out := &in.IgnoreEditionCheck, &out.IgnoreEditionCheck
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReplicationObservation.
func (in *ReplicationObservation) DeepCopy() *ReplicationObservation {
	if in == nil {
		return nil
	}
	out := new(ReplicationObservation)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *ReplicationParameters) DeepCopyInto(out *ReplicationParameters) {
	*out = *in
	if in.EnableToAccount != nil {
		in, out := &in.EnableToAccount, &out.EnableToAccount
		*out = make([]EnableToAccountParameters, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
	if in.IgnoreEditionCheck != nil {
		in, out := &in.IgnoreEditionCheck, &out.IgnoreEditionCheck
		*out = new(bool)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new ReplicationParameters.
func (in *ReplicationParameters) DeepCopy() *ReplicationParameters {
	if in == nil {
		return nil
	}
	out := new(ReplicationParameters)
	in.DeepCopyInto(out)
	return out
}
